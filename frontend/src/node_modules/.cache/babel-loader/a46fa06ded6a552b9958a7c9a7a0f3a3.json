{"ast":null,"code":"var _jsxFileName = \"/home/nevin/Project-2/test-react-auth/frontend/src/contexts/user.context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { App, Credentials } from \"realm-web\";\nimport { APP_ID } from \"../realm/constants\";\nimport { createContext, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new App(APP_ID);\nconst UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const emailPasswordLogin = async (email, password) => {\n    const credentials = Credentials.emailPassword(email, password);\n    const authenticatedUser = await app.logIn(credentials);\n    setUser(authenticatedUser);\n    return authenticatedUser;\n  };\n  const emailPasswordSignup = async (email, password, username) => {\n    // Add username parameter\n    try {\n      const response = await fetch('/api/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          username\n        })\n      });\n      if (!response.ok) throw new Error('Signup failed');\n      const userData = await response.json(); // Assuming your endpoint responds with user data\n      setUser(userData); // Update user state\n    } catch (error) {\n      console.error(\"Error during signup:\", error);\n      throw error;\n    }\n  };\n  const fetchUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.refreshCustomData();\n      // Now, if we have a user, we are setting it to our user context\n      // so that we can use it in our app across different components.\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Function to logout user from our App Services app\n  const logOutUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.logOut();\n      // Setting the user to null once loggedOut.\n      setUser(null);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser,\n      emailPasswordLogin,\n      emailPasswordSignup,\n      fetchUser,\n      logOutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the UserContext\n_s(UserProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["App","Credentials","APP_ID","createContext","useState","useContext","jsxDEV","_jsxDEV","app","UserContext","UserProvider","children","_s","user","setUser","emailPasswordLogin","email","password","credentials","emailPassword","authenticatedUser","logIn","emailPasswordSignup","username","response","fetch","method","headers","body","JSON","stringify","ok","Error","userData","json","error","console","fetchUser","currentUser","refreshCustomData","logOutUser","logOut","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/contexts/user.context.js"],"sourcesContent":["import { App, Credentials } from \"realm-web\";\nimport { APP_ID } from \"../realm/constants\";\nimport { createContext, useState, useContext } from \"react\";\n\nconst app = new App(APP_ID);\n\n\nconst UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  const emailPasswordLogin = async (email, password) => {\n   const credentials = Credentials.emailPassword(email, password);\n   const authenticatedUser = await app.logIn(credentials);\n   setUser(authenticatedUser);\n   return authenticatedUser;\n  };\n\n  const emailPasswordSignup = async (email, password, username) => { // Add username parameter\n    try {\n      const response = await fetch('/api/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password, username })\n      });\n      \n      if (!response.ok) throw new Error('Signup failed');\n\n      const userData = await response.json(); // Assuming your endpoint responds with user data\n      setUser(userData); // Update user state\n    } catch (error) {\n      console.error(\"Error during signup:\", error);\n      throw error;\n    }\n  };\n\n  const fetchUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.refreshCustomData();\n      // Now, if we have a user, we are setting it to our user context\n      // so that we can use it in our app across different components.\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  // Function to logout user from our App Services app\n  const logOutUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.logOut();\n      // Setting the user to null once loggedOut.\n      setUser(null);\n      return true;\n    } catch (error) {\n      throw error\n    }\n  }\n\n  return (\n    <UserContext.Provider value={{ user, setUser, emailPasswordLogin, emailPasswordSignup, fetchUser, logOutUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\n// Custom hook to use the UserContext\nexport const useUser = () => useContext(UserContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}