{"ast":null,"code":"var _jsxFileName = \"/home/nevin/Project-2/test-react-auth/frontend/src/pages/PrivateRoute.page.js\",\n  _s = $RefreshSig$();\nimport { useContext } from \"react\";\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = () => {\n  _s();\n  // Fetching the user from the user context.\n  //  const { user } = useContext(UserContext);\n  const {\n    user\n  } = useUser();\n  const location = useLocation();\n  const redirectLoginUrl = `/login?redirectTo=${encodeURI(location.pathname)}`;\n\n  // If the user is not logged in we are redirecting them\n  // to the login page. Otherwise we are letting them to\n  // continue to the page as per the URL using <Outlet />.\n  return !user ? /*#__PURE__*/_jsxDEV(Navigate, {\n    to: redirectLoginUrl\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 54\n  }, this);\n};\n_s(PrivateRoute, \"4H6ulBV5i8yTSODwZaHY+RTQ8QE=\", false, function () {\n  return [useUser, useLocation];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["useContext","Navigate","Outlet","useLocation","useUser","UserContext","jsxDEV","_jsxDEV","PrivateRoute","_s","user","location","redirectLoginUrl","encodeURI","pathname","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/pages/PrivateRoute.page.js"],"sourcesContent":["import { useContext } from \"react\";\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\n \nconst PrivateRoute = () => {\n \n // Fetching the user from the user context.\n//  const { user } = useContext(UserContext);\nconst { user } = useUser();\nconst location = useLocation();\n const redirectLoginUrl = `/login?redirectTo=${encodeURI(location.pathname)}`;\n \n // If the user is not logged in we are redirecting them\n // to the login page. Otherwise we are letting them to\n // continue to the page as per the URL using <Outlet />.\n return !user ? <Navigate to={redirectLoginUrl} /> : <Outlet /> ;\n}\n \nexport default PrivateRoute;"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,OAAO,EAAEC,WAAW,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE1B;EACD;EACA,MAAM;IAAEC;EAAK,CAAC,GAAGN,OAAO,CAAC,CAAC;EAC1B,MAAMO,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC7B,MAAMS,gBAAgB,GAAI,qBAAoBC,SAAS,CAACF,QAAQ,CAACG,QAAQ,CAAE,EAAC;;EAE5E;EACA;EACA;EACA,OAAO,CAACJ,IAAI,gBAAGH,OAAA,CAACN,QAAQ;IAACc,EAAE,EAAEH;EAAiB;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAAGZ,OAAA,CAACL,MAAM;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC/D,CAAC;AAAAV,EAAA,CAZKD,YAAY;EAAA,QAIDJ,OAAO,EACPD,WAAW;AAAA;AAAAiB,EAAA,GALtBZ,YAAY;AAclB,eAAeA,YAAY;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}