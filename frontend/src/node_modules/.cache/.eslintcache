[{"/home/nevin/Project-2/test-react-auth/frontend/src/index.js":"1","/home/nevin/Project-2/test-react-auth/frontend/src/reportWebVitals.js":"2","/home/nevin/Project-2/test-react-auth/frontend/src/App.js":"3","/home/nevin/Project-2/test-react-auth/frontend/src/contexts/user.context.js":"4","/home/nevin/Project-2/test-react-auth/frontend/src/pages/Home.page.js":"5","/home/nevin/Project-2/test-react-auth/frontend/src/pages/Login.page.js":"6","/home/nevin/Project-2/test-react-auth/frontend/src/pages/Signup.page.js":"7","/home/nevin/Project-2/test-react-auth/frontend/src/pages/PrivateRoute.page.js":"8","/home/nevin/Project-2/test-react-auth/frontend/src/realm/constants.js":"9"},{"size":535,"mtime":1711622261481,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1711622261481,"results":"12","hashOfConfig":"11"},{"size":815,"mtime":1712853968317,"results":"13","hashOfConfig":"11"},{"size":2566,"mtime":1712846977718,"results":"14","hashOfConfig":"11"},{"size":3870,"mtime":1713049908722,"results":"15","hashOfConfig":"11"},{"size":3219,"mtime":1712847031291,"results":"16","hashOfConfig":"11"},{"size":2712,"mtime":1712755021694,"results":"17","hashOfConfig":"11"},{"size":701,"mtime":1711836893828,"results":"18","hashOfConfig":"11"},{"size":44,"mtime":1711734625565,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1hyym3g",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nevin/Project-2/test-react-auth/frontend/src/index.js",[],["42","43"],"/home/nevin/Project-2/test-react-auth/frontend/src/reportWebVitals.js",[],"/home/nevin/Project-2/test-react-auth/frontend/src/App.js",[],"/home/nevin/Project-2/test-react-auth/frontend/src/contexts/user.context.js",[],"/home/nevin/Project-2/test-react-auth/frontend/src/pages/Home.page.js",["44","45","46","47","48"],"/home/nevin/Project-2/test-react-auth/frontend/src/pages/Login.page.js",["49","50","51"],"import { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\n \nconst Login = () => {\n const navigate = useNavigate();\n const location = useLocation();\n \n // We are consuming our user-management context to\n // get & set the user details here\n//  const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\nconst { user, fetchUser, emailPasswordLogin } = useUser();\n // We are using React's \"useState\" hook to keep track\n //  of the form values.\n const [form, setForm] = useState({\n   email: \"\",\n   password: \"\"\n });\n \n // This function will be called whenever the user edits the form.\n const onFormInputChange = (event) => {\n   const { name, value } = event.target;\n   setForm({ ...form, [name]: value });\n };\n \n // This function will redirect the user to the\n // appropriate page once the authentication is done.\n const redirectNow = () => {\n   const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n   navigate(redirectTo ? redirectTo : \"/\");\n }\n \n // Once a user logs in to our app, we donâ€™t want to ask them for their\n // credentials again every time the user refreshes or revisits our app, \n // so we are checking if the user is already logged in and\n // if so we are redirecting the user to the home page.\n // Otherwise we will do nothing and let the user to login.\n const loadUser = async () => {\n   if (!user) {\n     const fetchedUser = await fetchUser();\n     if (fetchedUser) {\n       // Redirecting them once fetched.\n       redirectNow();\n     }\n   }\n }\n \n // This useEffect will run only once when the component is mounted.\n // Hence this is helping us in verifying whether the user is already logged in\n // or not.\n useEffect(() => {\n   loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\n }, []);\n \n // This function gets fired when the user clicks on the \"Login\" button.\n const onSubmit = async (event) => {\n   try {\n     // Here we are passing user details to our emailPasswordLogin\n     // function that we imported from our realm/authentication.js\n     // to validate the user credentials and log in the user into our App.\n     const user = await emailPasswordLogin(form.email, form.password);\n     if (user) {\n       redirectNow();\n     }\n   } catch (error) {\n       if (error.statusCode === 401) {\n          alert(\"Invalid username/password. Try again!\");\n      } else {\n          alert(error);\n      }\n \n   }\n };\n \n return <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\n   <h1>Login</h1>\n   <TextField\n     label=\"Username or Email\"\n     type=\"email\"\n     variant=\"outlined\"\n     name=\"email\"\n     value={form.email}\n     onChange={onFormInputChange}\n     style={{ marginBottom: \"1rem\" }}\n   />\n   <TextField\n     label=\"Password\"\n     type=\"password\"\n     variant=\"outlined\"\n     name=\"password\"\n     value={form.password}\n     onChange={onFormInputChange}\n     style={{ marginBottom: \"1rem\" }}\n   />\n   <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n     Login\n   </Button>\n   \n </form>\n}\n \nexport default Login;","/home/nevin/Project-2/test-react-auth/frontend/src/pages/Signup.page.js",["52","53","54"],"import { Button, TextField } from \"@mui/material\";\nimport { useContext, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\n \nconst Signup = () => {\n  const { emailPasswordSignup } = useUser();\n const navigate = useNavigate();\n const location = useLocation();\n \n // As explained in the Login page.\n //const { emailPasswordSignup } = useContext(UserContext);\n const [form, setForm] = useState({\n   username: \"\", // Add this line for the username\n   email: \"\",\n   password: \"\",\n   confirmPassword: \"\" // Add this line\n });\n\n const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n \n // As explained in the Login page.\n const onFormInputChange = (event) => {\n   const { name, value } = event.target;\n   setForm({ ...form, [name]: value });\n };\n \n \n // As explained in the Login page.\n const redirectNow = () => {\n   const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n   navigate(redirectTo ? redirectTo : \"/\");\n }\n \n // As explained in the Login page.\n const onSubmit = async (event) => {\n    event.preventDefault();\n    if (form.password !== form.confirmPassword) {\n    alert(\"Passwords do not match.\");\n    return; // Prevent the form from submitting\n    }\n\n    if (!emailRegex.test(form.email)) {\n      alert(\"Please enter a valid email address.\");\n      return; // Prevent the form from submitting\n  }\n  \n   try {\n    const user = await emailPasswordSignup(form.email, form.password, form.username);\n     if (user) {\n       redirectNow();\n     }\n   } catch (error) {\n     alert(error);\n   }\n };\n \n return <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\n   <h1>Signup</h1>\n   <TextField\n  label=\"Username\"\n  type=\"text\"\n  variant=\"outlined\"\n  name=\"username\"\n  value={form.username}\n  onInput={onFormInputChange}\n  style={{ marginBottom: \"1rem\" }}\n/>\n\n   <TextField\n     label=\"Email\"\n     type=\"email\"\n     variant=\"outlined\"\n     name=\"email\"\n     value={form.email}\n     onInput={onFormInputChange}\n     style={{ marginBottom: \"1rem\" }}\n   />\n   <TextField\n     label=\"Password\"\n     type=\"password\"\n     variant=\"outlined\"\n     name=\"password\"\n     value={form.password}\n     onInput={onFormInputChange}\n     style={{ marginBottom: \"1rem\" }}\n   />\n   <TextField // New Confirm Password TextField\n      label=\"Confirm Password\"\n      type=\"password\"\n      variant=\"outlined\"\n      name=\"confirmPassword\"\n      value={form.confirmPassword}\n      onInput={onFormInputChange}\n      style={{ marginBottom: \"1rem\" }}\n    />\n   <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n     Signup\n   </Button>\n   \n </form>\n}\n \nexport default Signup;","/home/nevin/Project-2/test-react-auth/frontend/src/pages/PrivateRoute.page.js",["55","56"],"import { useContext } from \"react\";\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\n \nconst PrivateRoute = () => {\n \n // Fetching the user from the user context.\n//  const { user } = useContext(UserContext);\nconst { user } = useUser();\nconst location = useLocation();\n const redirectLoginUrl = `/login?redirectTo=${encodeURI(location.pathname)}`;\n \n // If the user is not logged in we are redirecting them\n // to the login page. Otherwise we are letting them to\n // continue to the page as per the URL using <Outlet />.\n return !user ? <Navigate to={redirectLoginUrl} /> : <Outlet /> ;\n}\n \nexport default PrivateRoute;","/home/nevin/Project-2/test-react-auth/frontend/src/realm/constants.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":4,"column":10,"nodeType":"63","messageId":"64","endLine":4,"endColumn":16},{"ruleId":"61","severity":1,"message":"65","line":4,"column":49,"nodeType":"63","messageId":"64","endLine":4,"endColumn":60},{"ruleId":"61","severity":1,"message":"66","line":12,"column":9,"nodeType":"63","messageId":"64","endLine":12,"endColumn":15},{"ruleId":"67","severity":1,"message":"68","line":94,"column":11,"nodeType":"69","endLine":94,"endColumn":23},{"ruleId":"61","severity":1,"message":"70","line":106,"column":9,"nodeType":"63","messageId":"64","endLine":106,"endColumn":20},{"ruleId":"61","severity":1,"message":"71","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":20},{"ruleId":"61","severity":1,"message":"72","line":3,"column":10,"nodeType":"63","messageId":"64","endLine":3,"endColumn":14},{"ruleId":"61","severity":1,"message":"73","line":4,"column":19,"nodeType":"63","messageId":"64","endLine":4,"endColumn":30},{"ruleId":"61","severity":1,"message":"71","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":20},{"ruleId":"61","severity":1,"message":"72","line":3,"column":10,"nodeType":"63","messageId":"64","endLine":3,"endColumn":14},{"ruleId":"61","severity":1,"message":"73","line":4,"column":19,"nodeType":"63","messageId":"64","endLine":4,"endColumn":30},{"ruleId":"61","severity":1,"message":"71","line":1,"column":10,"nodeType":"63","messageId":"64","endLine":1,"endColumn":20},{"ruleId":"61","severity":1,"message":"73","line":3,"column":19,"nodeType":"63","messageId":"64","endLine":3,"endColumn":30},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'CardActions' is defined but never used.","'logOut' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'toggleUsers' is assigned a value but never used.","'useContext' is defined but never used.","'Link' is defined but never used.","'UserContext' is defined but never used.","no-global-assign","no-unsafe-negation"]