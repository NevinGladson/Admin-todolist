{"ast":null,"code":"/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */export default function createGetCssVar(){let prefix=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';function appendVar(){for(var _len=arguments.length,vars=new Array(_len),_key=0;_key<_len;_key++){vars[_key]=arguments[_key];}if(!vars.length){return'';}const value=vars[0];if(typeof value==='string'&&!value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/)){return\", var(--\".concat(prefix?\"\".concat(prefix,\"-\"):'').concat(value).concat(appendVar(...vars.slice(1)),\")\");}return\", \".concat(value);}// AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\nconst getCssVar=function(field){for(var _len2=arguments.length,fallbacks=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){fallbacks[_key2-1]=arguments[_key2];}return\"var(--\".concat(prefix?\"\".concat(prefix,\"-\"):'').concat(field).concat(appendVar(...fallbacks),\")\");};return getCssVar;}","map":{"version":3,"names":["createGetCssVar","prefix","arguments","length","undefined","appendVar","_len","vars","Array","_key","value","match","concat","slice","getCssVar","field","_len2","fallbacks","_key2"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/system/esm/cssVars/createGetCssVar.js"],"sourcesContent":["/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return `, ${value}`;\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  const getCssVar = (field, ...fallbacks) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n  return getCssVar;\n}"],"mappings":"AAAA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAA,eAAeA,CAAA,CAAc,IAAb,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACjD,QAAS,CAAAG,SAASA,CAAA,CAAU,SAAAC,IAAA,CAAAJ,SAAA,CAAAC,MAAA,CAANI,IAAI,KAAAC,KAAA,CAAAF,IAAA,EAAAG,IAAA,GAAAA,IAAA,CAAAH,IAAA,CAAAG,IAAA,IAAJF,IAAI,CAAAE,IAAA,EAAAP,SAAA,CAAAO,IAAA,GACxB,GAAI,CAACF,IAAI,CAACJ,MAAM,CAAE,CAChB,MAAO,EAAE,CACX,CACA,KAAM,CAAAO,KAAK,CAAGH,IAAI,CAAC,CAAC,CAAC,CACrB,GAAI,MAAO,CAAAG,KAAK,GAAK,QAAQ,EAAI,CAACA,KAAK,CAACC,KAAK,CAAC,6GAA6G,CAAC,CAAE,CAC5J,iBAAAC,MAAA,CAAkBX,MAAM,IAAAW,MAAA,CAAMX,MAAM,MAAM,EAAE,EAAAW,MAAA,CAAGF,KAAK,EAAAE,MAAA,CAAGP,SAAS,CAAC,GAAGE,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,MACpF,CACA,WAAAD,MAAA,CAAYF,KAAK,EACnB,CAEA;AACA,KAAM,CAAAI,SAAS,CAAG,QAAAA,CAACC,KAAK,CAAmB,SAAAC,KAAA,CAAAd,SAAA,CAAAC,MAAA,CAAdc,SAAS,KAAAT,KAAA,CAAAQ,KAAA,GAAAA,KAAA,MAAAE,KAAA,GAAAA,KAAA,CAAAF,KAAA,CAAAE,KAAA,IAATD,SAAS,CAAAC,KAAA,IAAAhB,SAAA,CAAAgB,KAAA,GACpC,eAAAN,MAAA,CAAgBX,MAAM,IAAAW,MAAA,CAAMX,MAAM,MAAM,EAAE,EAAAW,MAAA,CAAGG,KAAK,EAAAH,MAAA,CAAGP,SAAS,CAAC,GAAGY,SAAS,CAAC,MAC9E,CAAC,CACD,MAAO,CAAAH,SAAS,CAClB","ignoreList":[]},"metadata":{},"sourceType":"module"}