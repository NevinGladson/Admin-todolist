{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/esm/extends\";import _toPropertyKey from\"@babel/runtime/helpers/esm/toPropertyKey\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";const _excluded=[\"colorSchemes\",\"components\",\"defaultColorScheme\"];import deepmerge from'@mui/utils/deepmerge';import cssVarsParser from'./cssVarsParser';function prepareCssVars(theme,parserConfig){// @ts-ignore - ignore components do not exist\nconst{colorSchemes={},defaultColorScheme='light'}=theme,otherTheme=_objectWithoutPropertiesLoose(theme,_excluded);const{vars:rootVars,css:rootCss,varsWithDefaults:rootVarsWithDefaults}=cssVarsParser(otherTheme,parserConfig);let themeVars=rootVarsWithDefaults;const colorSchemesMap={};const{[defaultColorScheme]:light}=colorSchemes,otherColorSchemes=_objectWithoutPropertiesLoose(colorSchemes,[defaultColorScheme].map(_toPropertyKey));Object.entries(otherColorSchemes||{}).forEach(_ref=>{let[key,scheme]=_ref;const{vars,css,varsWithDefaults}=cssVarsParser(scheme,parserConfig);themeVars=deepmerge(themeVars,varsWithDefaults);colorSchemesMap[key]={css,vars};});if(light){// default color scheme vars should be merged last to set as default\nconst{css,vars,varsWithDefaults}=cssVarsParser(light,parserConfig);themeVars=deepmerge(themeVars,varsWithDefaults);colorSchemesMap[defaultColorScheme]={css,vars};}const generateCssVars=colorScheme=>{var _parserConfig$getSele2;if(!colorScheme){var _parserConfig$getSele;const css=_extends({},rootCss);return{css,vars:rootVars,selector:(parserConfig==null||(_parserConfig$getSele=parserConfig.getSelector)==null?void 0:_parserConfig$getSele.call(parserConfig,colorScheme,css))||':root'};}const css=_extends({},colorSchemesMap[colorScheme].css);return{css,vars:colorSchemesMap[colorScheme].vars,selector:(parserConfig==null||(_parserConfig$getSele2=parserConfig.getSelector)==null?void 0:_parserConfig$getSele2.call(parserConfig,colorScheme,css))||':root'};};return{vars:themeVars,generateCssVars};}export default prepareCssVars;","map":{"version":3,"names":["_extends","_toPropertyKey","_objectWithoutPropertiesLoose","_excluded","deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","defaultColorScheme","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","map","Object","entries","forEach","_ref","key","scheme","generateCssVars","colorScheme","_parserConfig$getSele2","_parserConfig$getSele","selector","getSelector","call"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n      colorSchemes = {},\n      defaultColorScheme = 'light'\n    } = theme,\n    otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n      [defaultColorScheme]: light\n    } = colorSchemes,\n    otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    var _parserConfig$getSele2;\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n      const css = _extends({}, rootCss);\n      return {\n        css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css)) || ':root'\n      };\n    }\n    const css = _extends({}, colorSchemesMap[colorScheme].css);\n    return {\n      css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}