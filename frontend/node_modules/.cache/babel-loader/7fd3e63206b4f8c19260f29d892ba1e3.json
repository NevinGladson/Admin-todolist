{"ast":null,"code":"import{createContext,useState,useContext}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const UserContext=/*#__PURE__*/createContext();export const UserProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);// Updated to interact with your Express backend\nconst emailPasswordLogin=async(loginIdentifier,password)=>{try{const response=await fetch('http://admin-todolist-env.eba-qgfa3w94.us-east-1.elasticbeanstalk.com/api/users/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({loginIdentifier,// This can be either username or email\npassword}),credentials:'include'});if(!response.ok){const errorDetails=await response.json();throw new Error(\"Login failed: \".concat(errorDetails.message||\"Unknown error\"));}const userData=await response.json();setUser(userData);return userData;}catch(error){console.error(\"Error during login:\",error);throw error;}};const emailPasswordSignup=async(email,password,username)=>{try{const response=await fetch('http://admin-todolist-env.eba-qgfa3w94.us-east-1.elasticbeanstalk.com/api/users/signup',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password,username}),credentials:'include'// Include credentials for cross-origin requests\n});if(!response.ok){const errorDetails=await response.json();// Assuming the server sends JSON with error details\nthrow new Error(\"Signup failed: \".concat(errorDetails.error||\"Unknown error\"));}const userData=await response.json();// Assuming your endpoint responds with user data\nsetUser(userData);// You might adjust this based on your backend response\nreturn userData;}catch(error){console.error(\"Error during signup:\",error);throw error;}};// Placeholder for fetching user data, adjust based on your auth method\nconst fetchUser=async()=>{// Implement based on how you're managing user sessions or authentication state\n};const logOutUser=async()=>{// Implement logout functionality, possibly calling a backend endpoint to clear session/cookie\n};return/*#__PURE__*/_jsx(UserContext.Provider,{value:{user,setUser,emailPasswordLogin,emailPasswordSignup,fetchUser,logOutUser},children:children});};export const useUser=()=>useContext(UserContext);","map":{"version":3,"names":["createContext","useState","useContext","jsx","_jsx","UserContext","UserProvider","_ref","children","user","setUser","emailPasswordLogin","loginIdentifier","password","response","fetch","method","headers","body","JSON","stringify","credentials","ok","errorDetails","json","Error","concat","message","userData","error","console","emailPasswordSignup","email","username","fetchUser","logOutUser","Provider","value","useUser"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/contexts/user.context.js"],"sourcesContent":["import { createContext, useState, useContext } from \"react\";\n\nconst UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  // Updated to interact with your Express backend\n  const emailPasswordLogin = async (loginIdentifier, password) => {\n    try {\n        const response = await fetch('http://admin-todolist-env.eba-qgfa3w94.us-east-1.elasticbeanstalk.com/api/users/login', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                loginIdentifier, // This can be either username or email\n                password\n            }),\n            credentials: 'include'\n        });\n        \n        if (!response.ok) {\n            const errorDetails = await response.json();\n            throw new Error(`Login failed: ${errorDetails.message || \"Unknown error\"}`);\n        }\n\n        const userData = await response.json();\n        setUser(userData);\n        return userData;\n    } catch (error) {\n        console.error(\"Error during login:\", error);\n        throw error;\n    }\n};\n\n\n  const emailPasswordSignup = async (email, password, username) => {\n    try {\n      const response = await fetch('http://admin-todolist-env.eba-qgfa3w94.us-east-1.elasticbeanstalk.com/api/users/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password, username }),\n        credentials: 'include', // Include credentials for cross-origin requests\n      });\n      if (!response.ok) {\n        const errorDetails = await response.json(); // Assuming the server sends JSON with error details\n        throw new Error(`Signup failed: ${errorDetails.error || \"Unknown error\"}`);\n      }\n      const userData = await response.json(); // Assuming your endpoint responds with user data\n      setUser(userData); // You might adjust this based on your backend response\n      return userData;\n    } catch (error) {\n      console.error(\"Error during signup:\", error);\n      throw error;\n    }\n  };\n\n  // Placeholder for fetching user data, adjust based on your auth method\n  const fetchUser = async () => {\n    // Implement based on how you're managing user sessions or authentication state\n  };\n\n  const logOutUser = async () => {\n    // Implement logout functionality, possibly calling a backend endpoint to clear session/cookie\n  };\n\n  return (\n    <UserContext.Provider value={{ user, setUser, emailPasswordLogin, emailPasswordSignup, fetchUser, logOutUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = () => useContext(UserContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}