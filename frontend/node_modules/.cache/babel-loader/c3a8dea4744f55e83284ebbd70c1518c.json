{"ast":null,"code":"'use client';import*as React from'react';let globalId=0;function useGlobalId(idOverride){const[defaultId,setDefaultId]=React.useState(idOverride);const id=idOverride||defaultId;React.useEffect(()=>{if(defaultId==null){// Fallback to this default id when possible.\n// Use the incrementing value for client-side rendering only.\n// We can't use it server-side.\n// If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\nglobalId+=1;setDefaultId(\"mui-\".concat(globalId));}},[defaultId]);return id;}// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseId=React['useId'.toString()];/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */export default function useId(idOverride){if(maybeReactUseId!==undefined){const reactId=maybeReactUseId();return idOverride!=null?idOverride:reactId;}// eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\nreturn useGlobalId(idOverride);}","map":{"version":3,"names":["React","globalId","useGlobalId","idOverride","defaultId","setDefaultId","useState","id","useEffect","concat","maybeReactUseId","toString","useId","undefined","reactId"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/utils/useId/useId.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nlet globalId = 0;\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseId = React['useId'.toString()];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}"],"mappings":"AAAA,YAAY,CAEZ,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B,GAAI,CAAAC,QAAQ,CAAG,CAAC,CAChB,QAAS,CAAAC,WAAWA,CAACC,UAAU,CAAE,CAC/B,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGL,KAAK,CAACM,QAAQ,CAACH,UAAU,CAAC,CAC5D,KAAM,CAAAI,EAAE,CAAGJ,UAAU,EAAIC,SAAS,CAClCJ,KAAK,CAACQ,SAAS,CAAC,IAAM,CACpB,GAAIJ,SAAS,EAAI,IAAI,CAAE,CACrB;AACA;AACA;AACA;AACAH,QAAQ,EAAI,CAAC,CACbI,YAAY,QAAAI,MAAA,CAAQR,QAAQ,CAAE,CAAC,CACjC,CACF,CAAC,CAAE,CAACG,SAAS,CAAC,CAAC,CACf,MAAO,CAAAG,EAAE,CACX,CAEA;AACA,KAAM,CAAAG,eAAe,CAAGV,KAAK,CAAC,OAAO,CAACW,QAAQ,CAAC,CAAC,CAAC,CACjD;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAC,KAAKA,CAACT,UAAU,CAAE,CACxC,GAAIO,eAAe,GAAKG,SAAS,CAAE,CACjC,KAAM,CAAAC,OAAO,CAAGJ,eAAe,CAAC,CAAC,CACjC,MAAO,CAAAP,UAAU,EAAI,IAAI,CAAGA,UAAU,CAAGW,OAAO,CAClD,CACA;AACA,MAAO,CAAAZ,WAAW,CAACC,UAAU,CAAC,CAChC","ignoreList":[]},"metadata":{},"sourceType":"module"}