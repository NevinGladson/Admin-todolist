{"ast":null,"code":"'use client';import _extends from\"@babel/runtime/helpers/esm/extends\";import*as React from'react';function areEqual(a,b){return a===b;}const EMPTY_OBJECT={};const NOOP=()=>{};/**\n * Gets the current state augmented with controlled values from the outside.\n * If a state item has a corresponding controlled value, it will be used instead of the internal state.\n */function getControlledState(internalState,controlledProps){const augmentedState=_extends({},internalState);Object.keys(controlledProps).forEach(key=>{if(controlledProps[key]!==undefined){augmentedState[key]=controlledProps[key];}});return augmentedState;}/**\n * Defines an effect that compares the next state with the previous state and calls\n * the `onStateChange` callback if the state has changed.\n * The comparison is done based on the `stateComparers` parameter.\n */function useStateChangeDetection(parameters){const{nextState,initialState,stateComparers,onStateChange,controlledProps,lastActionRef}=parameters;const internalPreviousStateRef=React.useRef(initialState);React.useEffect(()=>{if(lastActionRef.current===null){// Detect changes only if an action has been dispatched.\nreturn;}const previousState=getControlledState(internalPreviousStateRef.current,controlledProps);Object.keys(nextState).forEach(key=>{var _stateComparers$key;// go through all state keys and compare them with the previous state\nconst stateComparer=(_stateComparers$key=stateComparers[key])!=null?_stateComparers$key:areEqual;const nextStateItem=nextState[key];const previousStateItem=previousState[key];if(previousStateItem==null&&nextStateItem!=null||previousStateItem!=null&&nextStateItem==null||previousStateItem!=null&&nextStateItem!=null&&!stateComparer(nextStateItem,previousStateItem)){var _event,_type;onStateChange==null||onStateChange((_event=lastActionRef.current.event)!=null?_event:null,key,nextStateItem,(_type=lastActionRef.current.type)!=null?_type:'',nextState);}});internalPreviousStateRef.current=nextState;lastActionRef.current=null;},[internalPreviousStateRef,nextState,lastActionRef,onStateChange,stateComparers,controlledProps]);}/**\n * The alternative to `React.useReducer` that lets you control the state from the outside.\n *\n * It can be used in an uncontrolled mode, similar to `React.useReducer`, or in a controlled mode, when the state is controlled by the props.\n * It also supports partially controlled state, when some state items are controlled and some are not.\n *\n * The controlled state items are provided via the `controlledProps` parameter.\n * When a reducer action is dispatched, the internal state is updated with the new values.\n * A change event (`onStateChange`) is then triggered (for each changed state item) if the new state is different from the previous state.\n * This event can be used to update the controlled values.\n *\n * The comparison of the previous and next states is done using the `stateComparers` parameter.\n * If a state item has a corresponding comparer, it will be used to determine if the state has changed.\n * This is useful when the state item is an object and you want to compare only a subset of its properties or if it's an array and you want to compare its contents.\n *\n * An additional feature is the `actionContext` parameter. It allows you to add additional properties to every action object,\n * similarly to how React context is implicitly available to every component.\n *\n * @template State - The type of the state calculated by the reducer.\n * @template Action - The type of the actions that can be dispatched.\n * @template ActionContext - The type of the additional properties that will be added to every action object.\n *\n * @ignore - internal hook.\n */export function useControllableReducer(parameters){const lastActionRef=React.useRef(null);const{reducer,initialState,controlledProps=EMPTY_OBJECT,stateComparers=EMPTY_OBJECT,onStateChange=NOOP,actionContext,componentName=''}=parameters;const controlledPropsRef=React.useRef(controlledProps);if(process.env.NODE_ENV!=='production'){// eslint-disable-next-line react-hooks/rules-of-hooks\nReact.useEffect(()=>{Object.keys(controlledProps).forEach(key=>{if(controlledPropsRef.current[key]!==undefined&&controlledProps[key]===undefined){console.error(\"useControllableReducer: \".concat(componentName?\"The \".concat(componentName,\" component\"):'A component',\" is changing a controlled prop to be uncontrolled: \").concat(key));}if(controlledPropsRef.current[key]===undefined&&controlledProps[key]!==undefined){console.error(\"useControllableReducer: \".concat(componentName?\"The \".concat(componentName,\" component\"):'A component',\" is changing an uncontrolled prop to be controlled: \").concat(key));}});},[controlledProps,componentName]);}// The reducer that is passed to React.useReducer is wrapped with a function that augments the state with controlled values.\nconst reducerWithControlledState=React.useCallback((state,action)=>{lastActionRef.current=action;const controlledState=getControlledState(state,controlledProps);const newState=reducer(controlledState,action);return newState;},[controlledProps,reducer]);const[nextState,dispatch]=React.useReducer(reducerWithControlledState,initialState);// The action that is passed to dispatch is augmented with the actionContext.\nconst dispatchWithContext=React.useCallback(action=>{dispatch(_extends({},action,{context:actionContext}));},[actionContext]);useStateChangeDetection({nextState,initialState,stateComparers:stateComparers!=null?stateComparers:EMPTY_OBJECT,onStateChange:onStateChange!=null?onStateChange:NOOP,controlledProps,lastActionRef});return[getControlledState(nextState,controlledProps),dispatchWithContext];}","map":{"version":3,"names":["_extends","React","areEqual","a","b","EMPTY_OBJECT","NOOP","getControlledState","internalState","controlledProps","augmentedState","Object","keys","forEach","key","undefined","useStateChangeDetection","parameters","nextState","initialState","stateComparers","onStateChange","lastActionRef","internalPreviousStateRef","useRef","useEffect","current","previousState","_stateComparers$key","stateComparer","nextStateItem","previousStateItem","_event","_type","event","type","useControllableReducer","reducer","actionContext","componentName","controlledPropsRef","process","env","NODE_ENV","console","error","concat","reducerWithControlledState","useCallback","state","action","controlledState","newState","dispatch","useReducer","dispatchWithContext","context"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/base/utils/useControllableReducer.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nfunction areEqual(a, b) {\n  return a === b;\n}\nconst EMPTY_OBJECT = {};\nconst NOOP = () => {};\n\n/**\n * Gets the current state augmented with controlled values from the outside.\n * If a state item has a corresponding controlled value, it will be used instead of the internal state.\n */\nfunction getControlledState(internalState, controlledProps) {\n  const augmentedState = _extends({}, internalState);\n  Object.keys(controlledProps).forEach(key => {\n    if (controlledProps[key] !== undefined) {\n      augmentedState[key] = controlledProps[key];\n    }\n  });\n  return augmentedState;\n}\n/**\n * Defines an effect that compares the next state with the previous state and calls\n * the `onStateChange` callback if the state has changed.\n * The comparison is done based on the `stateComparers` parameter.\n */\nfunction useStateChangeDetection(parameters) {\n  const {\n    nextState,\n    initialState,\n    stateComparers,\n    onStateChange,\n    controlledProps,\n    lastActionRef\n  } = parameters;\n  const internalPreviousStateRef = React.useRef(initialState);\n  React.useEffect(() => {\n    if (lastActionRef.current === null) {\n      // Detect changes only if an action has been dispatched.\n      return;\n    }\n    const previousState = getControlledState(internalPreviousStateRef.current, controlledProps);\n    Object.keys(nextState).forEach(key => {\n      var _stateComparers$key;\n      // go through all state keys and compare them with the previous state\n      const stateComparer = (_stateComparers$key = stateComparers[key]) != null ? _stateComparers$key : areEqual;\n      const nextStateItem = nextState[key];\n      const previousStateItem = previousState[key];\n      if (previousStateItem == null && nextStateItem != null || previousStateItem != null && nextStateItem == null || previousStateItem != null && nextStateItem != null && !stateComparer(nextStateItem, previousStateItem)) {\n        var _event, _type;\n        onStateChange == null || onStateChange((_event = lastActionRef.current.event) != null ? _event : null, key, nextStateItem, (_type = lastActionRef.current.type) != null ? _type : '', nextState);\n      }\n    });\n    internalPreviousStateRef.current = nextState;\n    lastActionRef.current = null;\n  }, [internalPreviousStateRef, nextState, lastActionRef, onStateChange, stateComparers, controlledProps]);\n}\n\n/**\n * The alternative to `React.useReducer` that lets you control the state from the outside.\n *\n * It can be used in an uncontrolled mode, similar to `React.useReducer`, or in a controlled mode, when the state is controlled by the props.\n * It also supports partially controlled state, when some state items are controlled and some are not.\n *\n * The controlled state items are provided via the `controlledProps` parameter.\n * When a reducer action is dispatched, the internal state is updated with the new values.\n * A change event (`onStateChange`) is then triggered (for each changed state item) if the new state is different from the previous state.\n * This event can be used to update the controlled values.\n *\n * The comparison of the previous and next states is done using the `stateComparers` parameter.\n * If a state item has a corresponding comparer, it will be used to determine if the state has changed.\n * This is useful when the state item is an object and you want to compare only a subset of its properties or if it's an array and you want to compare its contents.\n *\n * An additional feature is the `actionContext` parameter. It allows you to add additional properties to every action object,\n * similarly to how React context is implicitly available to every component.\n *\n * @template State - The type of the state calculated by the reducer.\n * @template Action - The type of the actions that can be dispatched.\n * @template ActionContext - The type of the additional properties that will be added to every action object.\n *\n * @ignore - internal hook.\n */\nexport function useControllableReducer(parameters) {\n  const lastActionRef = React.useRef(null);\n  const {\n    reducer,\n    initialState,\n    controlledProps = EMPTY_OBJECT,\n    stateComparers = EMPTY_OBJECT,\n    onStateChange = NOOP,\n    actionContext,\n    componentName = ''\n  } = parameters;\n  const controlledPropsRef = React.useRef(controlledProps);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      Object.keys(controlledProps).forEach(key => {\n        if (controlledPropsRef.current[key] !== undefined && controlledProps[key] === undefined) {\n          console.error(`useControllableReducer: ${componentName ? `The ${componentName} component` : 'A component'} is changing a controlled prop to be uncontrolled: ${key}`);\n        }\n        if (controlledPropsRef.current[key] === undefined && controlledProps[key] !== undefined) {\n          console.error(`useControllableReducer: ${componentName ? `The ${componentName} component` : 'A component'} is changing an uncontrolled prop to be controlled: ${key}`);\n        }\n      });\n    }, [controlledProps, componentName]);\n  }\n\n  // The reducer that is passed to React.useReducer is wrapped with a function that augments the state with controlled values.\n  const reducerWithControlledState = React.useCallback((state, action) => {\n    lastActionRef.current = action;\n    const controlledState = getControlledState(state, controlledProps);\n    const newState = reducer(controlledState, action);\n    return newState;\n  }, [controlledProps, reducer]);\n  const [nextState, dispatch] = React.useReducer(reducerWithControlledState, initialState);\n\n  // The action that is passed to dispatch is augmented with the actionContext.\n  const dispatchWithContext = React.useCallback(action => {\n    dispatch(_extends({}, action, {\n      context: actionContext\n    }));\n  }, [actionContext]);\n  useStateChangeDetection({\n    nextState,\n    initialState,\n    stateComparers: stateComparers != null ? stateComparers : EMPTY_OBJECT,\n    onStateChange: onStateChange != null ? onStateChange : NOOP,\n    controlledProps,\n    lastActionRef\n  });\n  return [getControlledState(nextState, controlledProps), dispatchWithContext];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}