{"ast":null,"code":"'use client';import*as React from'react';import{unstable_useId as useId}from'@mui/utils';import{ListContext}from'../useList';/**\n * Stabilizes the ListContext value for the MenuItem component, so it doesn't change when sibling items update.\n *\n * @param id The id of the MenuItem. If undefined, it will be generated with useId.\n * @returns The stable ListContext value and the id of the MenuItem.\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItemContextStabilizer API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-item-context-stabilizer)\n */export function useMenuItemContextStabilizer(id){const listContext=React.useContext(ListContext);if(!listContext){throw new Error('MenuItem: ListContext was not found.');}const itemId=useId(id);const{getItemState,dispatch}=listContext;let itemState;if(itemId!=null){itemState=getItemState(itemId);}else{itemState={focusable:true,highlighted:false,selected:false};}const{highlighted,selected,focusable}=itemState;// The local version of getItemState can be only called with the current Option's value.\n// It doesn't make much sense to render an Option depending on other Options' state anyway.\nconst localGetItemState=React.useCallback(itemValue=>{if(itemValue!==itemId){throw new Error(['Base UI MenuItem: Tried to access the state of another MenuItem.',\"itemValue: \".concat(itemValue,\" | id: \").concat(itemId),'This is unsupported when the MenuItem uses the MenuItemContextStabilizer as a performance optimization.'].join('/n'));}return{highlighted,selected,focusable};},[highlighted,selected,focusable,itemId]);// Create a local (per MenuItem) instance of the ListContext that changes only when\n// the getItemState's return value changes.\n// This makes MenuItems re-render only when their state actually change, not when any MenuItem's state changes.\nconst localContextValue=React.useMemo(()=>({dispatch,getItemState:localGetItemState}),[dispatch,localGetItemState]);return{contextValue:localContextValue,id:itemId};}","map":{"version":3,"names":["React","unstable_useId","useId","ListContext","useMenuItemContextStabilizer","id","listContext","useContext","Error","itemId","getItemState","dispatch","itemState","focusable","highlighted","selected","localGetItemState","useCallback","itemValue","concat","join","localContextValue","useMemo","contextValue"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/base/useMenuItem/useMenuItemContextStabilizer.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { ListContext } from '../useList';\n\n/**\n * Stabilizes the ListContext value for the MenuItem component, so it doesn't change when sibling items update.\n *\n * @param id The id of the MenuItem. If undefined, it will be generated with useId.\n * @returns The stable ListContext value and the id of the MenuItem.\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItemContextStabilizer API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-item-context-stabilizer)\n */\nexport function useMenuItemContextStabilizer(id) {\n  const listContext = React.useContext(ListContext);\n  if (!listContext) {\n    throw new Error('MenuItem: ListContext was not found.');\n  }\n  const itemId = useId(id);\n  const {\n    getItemState,\n    dispatch\n  } = listContext;\n  let itemState;\n  if (itemId != null) {\n    itemState = getItemState(itemId);\n  } else {\n    itemState = {\n      focusable: true,\n      highlighted: false,\n      selected: false\n    };\n  }\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = itemState;\n\n  // The local version of getItemState can be only called with the current Option's value.\n  // It doesn't make much sense to render an Option depending on other Options' state anyway.\n  const localGetItemState = React.useCallback(itemValue => {\n    if (itemValue !== itemId) {\n      throw new Error(['Base UI MenuItem: Tried to access the state of another MenuItem.', `itemValue: ${itemValue} | id: ${itemId}`, 'This is unsupported when the MenuItem uses the MenuItemContextStabilizer as a performance optimization.'].join('/n'));\n    }\n    return {\n      highlighted,\n      selected,\n      focusable\n    };\n  }, [highlighted, selected, focusable, itemId]);\n\n  // Create a local (per MenuItem) instance of the ListContext that changes only when\n  // the getItemState's return value changes.\n  // This makes MenuItems re-render only when their state actually change, not when any MenuItem's state changes.\n  const localContextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState: localGetItemState\n  }), [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue,\n    id: itemId\n  };\n}"],"mappings":"AAAA,YAAY,CAEZ,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B,OAASC,cAAc,GAAI,CAAAC,KAAK,KAAQ,YAAY,CACpD,OAASC,WAAW,KAAQ,YAAY,CAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,4BAA4BA,CAACC,EAAE,CAAE,CAC/C,KAAM,CAAAC,WAAW,CAAGN,KAAK,CAACO,UAAU,CAACJ,WAAW,CAAC,CACjD,GAAI,CAACG,WAAW,CAAE,CAChB,KAAM,IAAI,CAAAE,KAAK,CAAC,sCAAsC,CAAC,CACzD,CACA,KAAM,CAAAC,MAAM,CAAGP,KAAK,CAACG,EAAE,CAAC,CACxB,KAAM,CACJK,YAAY,CACZC,QACF,CAAC,CAAGL,WAAW,CACf,GAAI,CAAAM,SAAS,CACb,GAAIH,MAAM,EAAI,IAAI,CAAE,CAClBG,SAAS,CAAGF,YAAY,CAACD,MAAM,CAAC,CAClC,CAAC,IAAM,CACLG,SAAS,CAAG,CACVC,SAAS,CAAE,IAAI,CACfC,WAAW,CAAE,KAAK,CAClBC,QAAQ,CAAE,KACZ,CAAC,CACH,CACA,KAAM,CACJD,WAAW,CACXC,QAAQ,CACRF,SACF,CAAC,CAAGD,SAAS,CAEb;AACA;AACA,KAAM,CAAAI,iBAAiB,CAAGhB,KAAK,CAACiB,WAAW,CAACC,SAAS,EAAI,CACvD,GAAIA,SAAS,GAAKT,MAAM,CAAE,CACxB,KAAM,IAAI,CAAAD,KAAK,CAAC,CAAC,kEAAkE,eAAAW,MAAA,CAAgBD,SAAS,YAAAC,MAAA,CAAUV,MAAM,EAAI,yGAAyG,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC,CAAC,CACxP,CACA,MAAO,CACLN,WAAW,CACXC,QAAQ,CACRF,SACF,CAAC,CACH,CAAC,CAAE,CAACC,WAAW,CAAEC,QAAQ,CAAEF,SAAS,CAAEJ,MAAM,CAAC,CAAC,CAE9C;AACA;AACA;AACA,KAAM,CAAAY,iBAAiB,CAAGrB,KAAK,CAACsB,OAAO,CAAC,KAAO,CAC7CX,QAAQ,CACRD,YAAY,CAAEM,iBAChB,CAAC,CAAC,CAAE,CAACL,QAAQ,CAAEK,iBAAiB,CAAC,CAAC,CAClC,MAAO,CACLO,YAAY,CAAEF,iBAAiB,CAC/BhB,EAAE,CAAEI,MACN,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module"}