{"ast":null,"code":"// Source from https://github.com/alitaheri/normalize-scroll-left\nlet cachedType;/**\n * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type\n *\n * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.\n *\n * Type             | <- Most Left | Most Right -> | Initial\n * ---------------- | ------------ | ------------- | -------\n * default          | 0            | 100           | 100\n * negative (spec*) | -100         | 0             | 0\n * reverse          | 100          | 0             | 0\n *\n * Edge 85: default\n * Safari 14: negative\n * Chrome 85: negative\n * Firefox 81: negative\n * IE11: reverse\n *\n * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll\n */export function detectScrollType(){if(cachedType){return cachedType;}const dummy=document.createElement('div');const container=document.createElement('div');container.style.width='10px';container.style.height='1px';dummy.appendChild(container);dummy.dir='rtl';dummy.style.fontSize='14px';dummy.style.width='4px';dummy.style.height='1px';dummy.style.position='absolute';dummy.style.top='-1000px';dummy.style.overflow='scroll';document.body.appendChild(dummy);cachedType='reverse';if(dummy.scrollLeft>0){cachedType='default';}else{dummy.scrollLeft=1;if(dummy.scrollLeft===0){cachedType='negative';}}document.body.removeChild(dummy);return cachedType;}// Based on https://stackoverflow.com/a/24394376\nexport function getNormalizedScrollLeft(element,direction){const scrollLeft=element.scrollLeft;// Perform the calculations only when direction is rtl to avoid messing up the ltr behavior\nif(direction!=='rtl'){return scrollLeft;}const type=detectScrollType();switch(type){case'negative':return element.scrollWidth-element.clientWidth+scrollLeft;case'reverse':return element.scrollWidth-element.clientWidth-scrollLeft;default:return scrollLeft;}}","map":{"version":3,"names":["cachedType","detectScrollType","dummy","document","createElement","container","style","width","height","appendChild","dir","fontSize","position","top","overflow","body","scrollLeft","removeChild","getNormalizedScrollLeft","element","direction","type","scrollWidth","clientWidth"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/utils/scrollLeft/scrollLeft.js"],"sourcesContent":["// Source from https://github.com/alitaheri/normalize-scroll-left\nlet cachedType;\n\n/**\n * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type\n *\n * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.\n *\n * Type             | <- Most Left | Most Right -> | Initial\n * ---------------- | ------------ | ------------- | -------\n * default          | 0            | 100           | 100\n * negative (spec*) | -100         | 0             | 0\n * reverse          | 100          | 0             | 0\n *\n * Edge 85: default\n * Safari 14: negative\n * Chrome 85: negative\n * Firefox 81: negative\n * IE11: reverse\n *\n * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll\n */\nexport function detectScrollType() {\n  if (cachedType) {\n    return cachedType;\n  }\n  const dummy = document.createElement('div');\n  const container = document.createElement('div');\n  container.style.width = '10px';\n  container.style.height = '1px';\n  dummy.appendChild(container);\n  dummy.dir = 'rtl';\n  dummy.style.fontSize = '14px';\n  dummy.style.width = '4px';\n  dummy.style.height = '1px';\n  dummy.style.position = 'absolute';\n  dummy.style.top = '-1000px';\n  dummy.style.overflow = 'scroll';\n  document.body.appendChild(dummy);\n  cachedType = 'reverse';\n  if (dummy.scrollLeft > 0) {\n    cachedType = 'default';\n  } else {\n    dummy.scrollLeft = 1;\n    if (dummy.scrollLeft === 0) {\n      cachedType = 'negative';\n    }\n  }\n  document.body.removeChild(dummy);\n  return cachedType;\n}\n\n// Based on https://stackoverflow.com/a/24394376\nexport function getNormalizedScrollLeft(element, direction) {\n  const scrollLeft = element.scrollLeft;\n\n  // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior\n  if (direction !== 'rtl') {\n    return scrollLeft;\n  }\n  const type = detectScrollType();\n  switch (type) {\n    case 'negative':\n      return element.scrollWidth - element.clientWidth + scrollLeft;\n    case 'reverse':\n      return element.scrollWidth - element.clientWidth - scrollLeft;\n    default:\n      return scrollLeft;\n  }\n}"],"mappings":"AAAA;AACA,GAAI,CAAAA,UAAU,CAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,gBAAgBA,CAAA,CAAG,CACjC,GAAID,UAAU,CAAE,CACd,MAAO,CAAAA,UAAU,CACnB,CACA,KAAM,CAAAE,KAAK,CAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAC3C,KAAM,CAAAC,SAAS,CAAGF,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAC/CC,SAAS,CAACC,KAAK,CAACC,KAAK,CAAG,MAAM,CAC9BF,SAAS,CAACC,KAAK,CAACE,MAAM,CAAG,KAAK,CAC9BN,KAAK,CAACO,WAAW,CAACJ,SAAS,CAAC,CAC5BH,KAAK,CAACQ,GAAG,CAAG,KAAK,CACjBR,KAAK,CAACI,KAAK,CAACK,QAAQ,CAAG,MAAM,CAC7BT,KAAK,CAACI,KAAK,CAACC,KAAK,CAAG,KAAK,CACzBL,KAAK,CAACI,KAAK,CAACE,MAAM,CAAG,KAAK,CAC1BN,KAAK,CAACI,KAAK,CAACM,QAAQ,CAAG,UAAU,CACjCV,KAAK,CAACI,KAAK,CAACO,GAAG,CAAG,SAAS,CAC3BX,KAAK,CAACI,KAAK,CAACQ,QAAQ,CAAG,QAAQ,CAC/BX,QAAQ,CAACY,IAAI,CAACN,WAAW,CAACP,KAAK,CAAC,CAChCF,UAAU,CAAG,SAAS,CACtB,GAAIE,KAAK,CAACc,UAAU,CAAG,CAAC,CAAE,CACxBhB,UAAU,CAAG,SAAS,CACxB,CAAC,IAAM,CACLE,KAAK,CAACc,UAAU,CAAG,CAAC,CACpB,GAAId,KAAK,CAACc,UAAU,GAAK,CAAC,CAAE,CAC1BhB,UAAU,CAAG,UAAU,CACzB,CACF,CACAG,QAAQ,CAACY,IAAI,CAACE,WAAW,CAACf,KAAK,CAAC,CAChC,MAAO,CAAAF,UAAU,CACnB,CAEA;AACA,MAAO,SAAS,CAAAkB,uBAAuBA,CAACC,OAAO,CAAEC,SAAS,CAAE,CAC1D,KAAM,CAAAJ,UAAU,CAAGG,OAAO,CAACH,UAAU,CAErC;AACA,GAAII,SAAS,GAAK,KAAK,CAAE,CACvB,MAAO,CAAAJ,UAAU,CACnB,CACA,KAAM,CAAAK,IAAI,CAAGpB,gBAAgB,CAAC,CAAC,CAC/B,OAAQoB,IAAI,EACV,IAAK,UAAU,CACb,MAAO,CAAAF,OAAO,CAACG,WAAW,CAAGH,OAAO,CAACI,WAAW,CAAGP,UAAU,CAC/D,IAAK,SAAS,CACZ,MAAO,CAAAG,OAAO,CAACG,WAAW,CAAGH,OAAO,CAACI,WAAW,CAAGP,UAAU,CAC/D,QACE,MAAO,CAAAA,UAAU,CACrB,CACF","ignoreList":[]},"metadata":{},"sourceType":"module"}