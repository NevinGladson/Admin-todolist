{"ast":null,"code":"export function isUnitless(value){return String(parseFloat(value)).length===String(value).length;}// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input){return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1]||'';}// Emulate the sass function \"unitless\"\nexport function toUnitless(length){return parseFloat(length);}// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize){return(length,toUnit)=>{const fromUnit=getUnit(length);// Optimize for cases where `from` and `to` units are accidentally the same.\nif(fromUnit===toUnit){return length;}// Convert input length to pixels.\nlet pxLength=toUnitless(length);if(fromUnit!=='px'){if(fromUnit==='em'){pxLength=toUnitless(length)*toUnitless(baseFontSize);}else if(fromUnit==='rem'){pxLength=toUnitless(length)*toUnitless(baseFontSize);}}// Convert length in pixels to the output unit\nlet outputLength=pxLength;if(toUnit!=='px'){if(toUnit==='em'){outputLength=pxLength/toUnitless(baseFontSize);}else if(toUnit==='rem'){outputLength=pxLength/toUnitless(baseFontSize);}else{return length;}}return parseFloat(outputLength.toFixed(5))+toUnit;};}export function alignProperty(_ref){let{size,grid}=_ref;const sizeBelow=size-size%grid;const sizeAbove=sizeBelow+grid;return size-sizeBelow<sizeAbove-size?sizeBelow:sizeAbove;}// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid(_ref2){let{lineHeight,pixels,htmlFontSize}=_ref2;return pixels/(lineHeight*htmlFontSize);}/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */export function responsiveProperty(_ref3){let{cssProperty,min,max,unit='rem',breakpoints=[600,900,1200],transform=null}=_ref3;const output={[cssProperty]:\"\".concat(min).concat(unit)};const factor=(max-min)/breakpoints[breakpoints.length-1];breakpoints.forEach(breakpoint=>{let value=min+factor*breakpoint;if(transform!==null){value=transform(value);}output[\"@media (min-width:\".concat(breakpoint,\"px)\")]={[cssProperty]:\"\".concat(Math.round(value*10000)/10000).concat(unit)};});return output;}","map":{"version":3,"names":["isUnitless","value","String","parseFloat","length","getUnit","input","match","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","alignProperty","_ref","size","grid","sizeBelow","sizeAbove","fontGrid","_ref2","lineHeight","pixels","htmlFontSize","responsiveProperty","_ref3","cssProperty","min","max","unit","breakpoints","transform","output","concat","factor","forEach","breakpoint","Math","round"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/material/styles/cssUtils.js"],"sourcesContent":["export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nexport function toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}