{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/esm/extends\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";import _formatMuiErrorMessage from\"@mui/utils/formatMuiErrorMessage\";const _excluded=[\"colorSchemes\",\"components\",\"generateCssVars\",\"cssVarPrefix\"];import*as React from'react';import PropTypes from'prop-types';import deepmerge from'@mui/utils/deepmerge';import{GlobalStyles}from'@mui/styled-engine';import{useTheme as muiUseTheme}from'@mui/private-theming';import ThemeProvider from'../ThemeProvider';import systemGetInitColorSchemeScript,{DEFAULT_ATTRIBUTE,DEFAULT_COLOR_SCHEME_STORAGE_KEY,DEFAULT_MODE_STORAGE_KEY}from'./getInitColorSchemeScript';import useCurrentColorScheme from'./useCurrentColorScheme';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const DISABLE_CSS_TRANSITION='*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';export default function createCssVarsProvider(options){const{themeId,/**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */theme:defaultTheme={},attribute:defaultAttribute=DEFAULT_ATTRIBUTE,modeStorageKey:defaultModeStorageKey=DEFAULT_MODE_STORAGE_KEY,colorSchemeStorageKey:defaultColorSchemeStorageKey=DEFAULT_COLOR_SCHEME_STORAGE_KEY,defaultMode:designSystemMode='light',defaultColorScheme:designSystemColorScheme,disableTransitionOnChange:designSystemTransitionOnChange=false,resolveTheme,excludeVariablesFromRoot}=options;if(!defaultTheme.colorSchemes||typeof designSystemColorScheme==='string'&&!defaultTheme.colorSchemes[designSystemColorScheme]||typeof designSystemColorScheme==='object'&&!defaultTheme.colorSchemes[designSystemColorScheme==null?void 0:designSystemColorScheme.light]||typeof designSystemColorScheme==='object'&&!defaultTheme.colorSchemes[designSystemColorScheme==null?void 0:designSystemColorScheme.dark]){console.error(\"MUI: `\".concat(designSystemColorScheme,\"` does not exist in `theme.colorSchemes`.\"));}const ColorSchemeContext=/*#__PURE__*/React.createContext(undefined);if(process.env.NODE_ENV!=='production'){ColorSchemeContext.displayName='ColorSchemeContext';}const useColorScheme=()=>{const value=React.useContext(ColorSchemeContext);if(!value){throw new Error(process.env.NODE_ENV!==\"production\"?\"MUI: `useColorScheme` must be called under <CssVarsProvider />\":_formatMuiErrorMessage(19));}return value;};function CssVarsProvider(props){const{children,theme:themeProp=defaultTheme,modeStorageKey=defaultModeStorageKey,colorSchemeStorageKey=defaultColorSchemeStorageKey,attribute=defaultAttribute,defaultMode=designSystemMode,defaultColorScheme=designSystemColorScheme,disableTransitionOnChange=designSystemTransitionOnChange,storageWindow=typeof window==='undefined'?undefined:window,documentNode=typeof document==='undefined'?undefined:document,colorSchemeNode=typeof document==='undefined'?undefined:document.documentElement,colorSchemeSelector=':root',disableNestedContext=false,disableStyleSheetGeneration=false}=props;const hasMounted=React.useRef(false);const upperTheme=muiUseTheme();const ctx=React.useContext(ColorSchemeContext);const nested=!!ctx&&!disableNestedContext;const scopedTheme=themeProp[themeId];const _ref=scopedTheme||themeProp,{colorSchemes={},components={},generateCssVars=()=>({vars:{},css:{}}),cssVarPrefix}=_ref,restThemeProp=_objectWithoutPropertiesLoose(_ref,_excluded);const allColorSchemes=Object.keys(colorSchemes);const defaultLightColorScheme=typeof defaultColorScheme==='string'?defaultColorScheme:defaultColorScheme.light;const defaultDarkColorScheme=typeof defaultColorScheme==='string'?defaultColorScheme:defaultColorScheme.dark;// 1. Get the data about the `mode`, `colorScheme`, and setter functions.\nconst{mode:stateMode,setMode,systemMode,lightColorScheme,darkColorScheme,colorScheme:stateColorScheme,setColorScheme}=useCurrentColorScheme({supportedColorSchemes:allColorSchemes,defaultLightColorScheme,defaultDarkColorScheme,modeStorageKey,colorSchemeStorageKey,defaultMode,storageWindow});let mode=stateMode;let colorScheme=stateColorScheme;if(nested){mode=ctx.mode;colorScheme=ctx.colorScheme;}const calculatedMode=(()=>{if(mode){return mode;}// This scope occurs on the server\nif(defaultMode==='system'){return designSystemMode;}return defaultMode;})();const calculatedColorScheme=(()=>{if(!colorScheme){// This scope occurs on the server\nif(calculatedMode==='dark'){return defaultDarkColorScheme;}// use light color scheme, if default mode is 'light' | 'system'\nreturn defaultLightColorScheme;}return colorScheme;})();// 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\nconst{css:rootCss,vars:rootVars}=generateCssVars();// 3. Start composing the theme object\nconst theme=_extends({},restThemeProp,{components,colorSchemes,cssVarPrefix,vars:rootVars,getColorSchemeSelector:targetColorScheme=>\"[\".concat(attribute,\"=\\\"\").concat(targetColorScheme,\"\\\"] &\")});// 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n//    The default color scheme stylesheet is constructed to have the least CSS specificity.\n//    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\nconst defaultColorSchemeStyleSheet={};const otherColorSchemesStyleSheet={};Object.entries(colorSchemes).forEach(_ref2=>{let[key,scheme]=_ref2;const{css,vars}=generateCssVars(key);theme.vars=deepmerge(theme.vars,vars);if(key===calculatedColorScheme){// 4.1 Merge the selected color scheme to the theme\nObject.keys(scheme).forEach(schemeKey=>{if(scheme[schemeKey]&&typeof scheme[schemeKey]==='object'){// shallow merge the 1st level structure of the theme.\ntheme[schemeKey]=_extends({},theme[schemeKey],scheme[schemeKey]);}else{theme[schemeKey]=scheme[schemeKey];}});if(theme.palette){theme.palette.colorScheme=key;}}const resolvedDefaultColorScheme=(()=>{if(typeof defaultColorScheme==='string'){return defaultColorScheme;}if(defaultMode==='dark'){return defaultColorScheme.dark;}return defaultColorScheme.light;})();if(key===resolvedDefaultColorScheme){if(excludeVariablesFromRoot){const excludedVariables={};excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar=>{excludedVariables[cssVar]=css[cssVar];delete css[cssVar];});defaultColorSchemeStyleSheet[\"[\".concat(attribute,\"=\\\"\").concat(key,\"\\\"]\")]=excludedVariables;}defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector,\", [\").concat(attribute,\"=\\\"\").concat(key,\"\\\"]\")]=css;}else{otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector===':root'?'':colorSchemeSelector,\"[\").concat(attribute,\"=\\\"\").concat(key,\"\\\"]\")]=css;}});theme.vars=deepmerge(theme.vars,rootVars);// 5. Declaring effects\n// 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\nReact.useEffect(()=>{if(colorScheme&&colorSchemeNode){// attaches attribute to <html> because the css variables are attached to :root (html)\ncolorSchemeNode.setAttribute(attribute,colorScheme);}},[colorScheme,attribute,colorSchemeNode]);// 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n// credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\nReact.useEffect(()=>{let timer;if(disableTransitionOnChange&&hasMounted.current&&documentNode){const css=documentNode.createElement('style');css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));documentNode.head.appendChild(css);// Force browser repaint\n(()=>window.getComputedStyle(documentNode.body))();timer=setTimeout(()=>{documentNode.head.removeChild(css);},1);}return()=>{clearTimeout(timer);};},[colorScheme,disableTransitionOnChange,documentNode]);React.useEffect(()=>{hasMounted.current=true;return()=>{hasMounted.current=false;};},[]);const contextValue=React.useMemo(()=>({allColorSchemes,colorScheme,darkColorScheme,lightColorScheme,mode,setColorScheme,setMode,systemMode}),[allColorSchemes,colorScheme,darkColorScheme,lightColorScheme,mode,setColorScheme,setMode,systemMode]);let shouldGenerateStyleSheet=true;if(disableStyleSheetGeneration||nested&&(upperTheme==null?void 0:upperTheme.cssVarPrefix)===cssVarPrefix){shouldGenerateStyleSheet=false;}const element=/*#__PURE__*/_jsxs(React.Fragment,{children:[shouldGenerateStyleSheet&&/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(GlobalStyles,{styles:{[colorSchemeSelector]:rootCss}}),/*#__PURE__*/_jsx(GlobalStyles,{styles:defaultColorSchemeStyleSheet}),/*#__PURE__*/_jsx(GlobalStyles,{styles:otherColorSchemesStyleSheet})]}),/*#__PURE__*/_jsx(ThemeProvider,{themeId:scopedTheme?themeId:undefined,theme:resolveTheme?resolveTheme(theme):theme,children:children})]});if(nested){return element;}return/*#__PURE__*/_jsx(ColorSchemeContext.Provider,{value:contextValue,children:element});}process.env.NODE_ENV!==\"production\"?CssVarsProvider.propTypes={/**\n     * The body attribute name to attach colorScheme.\n     */attribute:PropTypes.string,/**\n     * The component tree.\n     */children:PropTypes.node,/**\n     * The node used to attach the color-scheme attribute\n     */colorSchemeNode:PropTypes.any,/**\n     * The CSS selector for attaching the generated custom properties\n     */colorSchemeSelector:PropTypes.string,/**\n     * localStorage key used to store `colorScheme`\n     */colorSchemeStorageKey:PropTypes.string,/**\n     * The initial color scheme used.\n     */defaultColorScheme:PropTypes.oneOfType([PropTypes.string,PropTypes.object]),/**\n     * The initial mode used.\n     */defaultMode:PropTypes.string,/**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */disableNestedContext:PropTypes.bool,/**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */disableStyleSheetGeneration:PropTypes.bool,/**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */disableTransitionOnChange:PropTypes.bool,/**\n     * The document to attach the attribute to.\n     */documentNode:PropTypes.any,/**\n     * The key in the local storage used to store current color scheme.\n     */modeStorageKey:PropTypes.string,/**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */storageWindow:PropTypes.any,/**\n     * The calculated theme object that will be passed through context.\n     */theme:PropTypes.object}:void 0;const defaultLightColorScheme=typeof designSystemColorScheme==='string'?designSystemColorScheme:designSystemColorScheme.light;const defaultDarkColorScheme=typeof designSystemColorScheme==='string'?designSystemColorScheme:designSystemColorScheme.dark;const getInitColorSchemeScript=params=>systemGetInitColorSchemeScript(_extends({attribute:defaultAttribute,colorSchemeStorageKey:defaultColorSchemeStorageKey,defaultMode:designSystemMode,defaultLightColorScheme,defaultDarkColorScheme,modeStorageKey:defaultModeStorageKey},params));return{CssVarsProvider,useColorScheme,getInitColorSchemeScript};}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","concat","ColorSchemeContext","createContext","undefined","process","env","NODE_ENV","displayName","useColorScheme","value","useContext","Error","CssVarsProvider","props","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","scopedTheme","_ref","components","generateCssVars","vars","css","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","stateMode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","stateColorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","rootCss","rootVars","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","_ref2","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","styles","Provider","propTypes","string","node","any","oneOfType","object","bool","getInitColorSchemeScript","params"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from '@mui/utils/deepmerge';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n    const _ref = scopedTheme || themeProp,\n      {\n        colorSchemes = {},\n        components = {},\n        generateCssVars = () => ({\n          vars: {},\n          css: {}\n        }),\n        cssVarPrefix\n      } = _ref,\n      restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars();\n\n    // 3. Start composing the theme object\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}