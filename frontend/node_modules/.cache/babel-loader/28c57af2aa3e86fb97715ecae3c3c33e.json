{"ast":null,"code":"'use client';import*as React from'react';const UNINITIALIZED={};/**\n * A React.useRef() that is initialized lazily with a function. Note that it accepts an optional\n * initialization argument, so the initialization function doesn't need to be an inline closure.\n *\n * @usage\n *   const ref = useLazyRef(sortColumns, columns)\n */export default function useLazyRef(init,initArg){const ref=React.useRef(UNINITIALIZED);if(ref.current===UNINITIALIZED){ref.current=init(initArg);}return ref;}","map":{"version":3,"names":["React","UNINITIALIZED","useLazyRef","init","initArg","ref","useRef","current"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/utils/useLazyRef/useLazyRef.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nconst UNINITIALIZED = {};\n\n/**\n * A React.useRef() that is initialized lazily with a function. Note that it accepts an optional\n * initialization argument, so the initialization function doesn't need to be an inline closure.\n *\n * @usage\n *   const ref = useLazyRef(sortColumns, columns)\n */\nexport default function useLazyRef(init, initArg) {\n  const ref = React.useRef(UNINITIALIZED);\n  if (ref.current === UNINITIALIZED) {\n    ref.current = init(initArg);\n  }\n  return ref;\n}"],"mappings":"AAAA,YAAY,CAEZ,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B,KAAM,CAAAC,aAAa,CAAG,CAAC,CAAC,CAExB;AACA;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAC,UAAUA,CAACC,IAAI,CAAEC,OAAO,CAAE,CAChD,KAAM,CAAAC,GAAG,CAAGL,KAAK,CAACM,MAAM,CAACL,aAAa,CAAC,CACvC,GAAII,GAAG,CAACE,OAAO,GAAKN,aAAa,CAAE,CACjCI,GAAG,CAACE,OAAO,CAAGJ,IAAI,CAACC,OAAO,CAAC,CAC7B,CACA,MAAO,CAAAC,GAAG,CACZ","ignoreList":[]},"metadata":{},"sourceType":"module"}