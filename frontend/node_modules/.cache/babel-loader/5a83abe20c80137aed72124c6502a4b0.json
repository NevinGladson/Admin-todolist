{"ast":null,"code":"'use client';import*as React from'react';import{ListContext}from'../useList';/**\n * Stabilizes the ListContext value for the Option component, so it doesn't change when sibling Options update.\n *\n * @param value The value of the Option.\n * @returns The stable ListContext value.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOptionContextStabilizer API](https://mui.com/base-ui/react-select/hooks-api/#use-option-context-stabilizer)\n */export function useOptionContextStabilizer(value){const listContext=React.useContext(ListContext);if(!listContext){throw new Error('Option: ListContext was not found.');}const{getItemState,dispatch}=listContext;const{highlighted,selected,focusable}=getItemState(value);// The local version of getItemState can be only called with the current Option's value.\n// It doesn't make much sense to render an Option depending on other Options' state anyway.\nconst localGetItemState=React.useCallback(itemValue=>{if(itemValue!==value){throw new Error(['Base UI Option: Tried to access the state of another Option.','This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization.'].join('/n'));}return{highlighted,selected,focusable};},[highlighted,selected,focusable,value]);// Create a local (per Option) instance of the ListContext that changes only when\n// the getItemState's return value changes.\n// This makes Options re-render only when their state actually change, not when any Option's state changes.\nconst localContextValue=React.useMemo(()=>({dispatch,getItemState:localGetItemState}),[dispatch,localGetItemState]);return{contextValue:localContextValue};}","map":{"version":3,"names":["React","ListContext","useOptionContextStabilizer","value","listContext","useContext","Error","getItemState","dispatch","highlighted","selected","focusable","localGetItemState","useCallback","itemValue","join","localContextValue","useMemo","contextValue"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/base/useOption/useOptionContextStabilizer.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { ListContext } from '../useList';\n\n/**\n * Stabilizes the ListContext value for the Option component, so it doesn't change when sibling Options update.\n *\n * @param value The value of the Option.\n * @returns The stable ListContext value.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOptionContextStabilizer API](https://mui.com/base-ui/react-select/hooks-api/#use-option-context-stabilizer)\n */\nexport function useOptionContextStabilizer(value) {\n  const listContext = React.useContext(ListContext);\n  if (!listContext) {\n    throw new Error('Option: ListContext was not found.');\n  }\n  const {\n    getItemState,\n    dispatch\n  } = listContext;\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = getItemState(value);\n\n  // The local version of getItemState can be only called with the current Option's value.\n  // It doesn't make much sense to render an Option depending on other Options' state anyway.\n  const localGetItemState = React.useCallback(itemValue => {\n    if (itemValue !== value) {\n      throw new Error(['Base UI Option: Tried to access the state of another Option.', 'This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization.'].join('/n'));\n    }\n    return {\n      highlighted,\n      selected,\n      focusable\n    };\n  }, [highlighted, selected, focusable, value]);\n\n  // Create a local (per Option) instance of the ListContext that changes only when\n  // the getItemState's return value changes.\n  // This makes Options re-render only when their state actually change, not when any Option's state changes.\n  const localContextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState: localGetItemState\n  }), [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue\n  };\n}"],"mappings":"AAAA,YAAY,CAEZ,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B,OAASC,WAAW,KAAQ,YAAY,CAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,0BAA0BA,CAACC,KAAK,CAAE,CAChD,KAAM,CAAAC,WAAW,CAAGJ,KAAK,CAACK,UAAU,CAACJ,WAAW,CAAC,CACjD,GAAI,CAACG,WAAW,CAAE,CAChB,KAAM,IAAI,CAAAE,KAAK,CAAC,oCAAoC,CAAC,CACvD,CACA,KAAM,CACJC,YAAY,CACZC,QACF,CAAC,CAAGJ,WAAW,CACf,KAAM,CACJK,WAAW,CACXC,QAAQ,CACRC,SACF,CAAC,CAAGJ,YAAY,CAACJ,KAAK,CAAC,CAEvB;AACA;AACA,KAAM,CAAAS,iBAAiB,CAAGZ,KAAK,CAACa,WAAW,CAACC,SAAS,EAAI,CACvD,GAAIA,SAAS,GAAKX,KAAK,CAAE,CACvB,KAAM,IAAI,CAAAG,KAAK,CAAC,CAAC,8DAA8D,CAAE,qGAAqG,CAAC,CAACS,IAAI,CAAC,IAAI,CAAC,CAAC,CACrM,CACA,MAAO,CACLN,WAAW,CACXC,QAAQ,CACRC,SACF,CAAC,CACH,CAAC,CAAE,CAACF,WAAW,CAAEC,QAAQ,CAAEC,SAAS,CAAER,KAAK,CAAC,CAAC,CAE7C;AACA;AACA;AACA,KAAM,CAAAa,iBAAiB,CAAGhB,KAAK,CAACiB,OAAO,CAAC,KAAO,CAC7CT,QAAQ,CACRD,YAAY,CAAEK,iBAChB,CAAC,CAAC,CAAE,CAACJ,QAAQ,CAAEI,iBAAiB,CAAC,CAAC,CAClC,MAAO,CACLM,YAAY,CAAEF,iBAChB,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module"}