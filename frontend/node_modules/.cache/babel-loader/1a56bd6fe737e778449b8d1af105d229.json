{"ast":null,"code":"var _jsxFileName = \"/home/nevin/Project-2/test-react-auth/frontend/src/pages/Login.page.js\",\n  _s = $RefreshSig$();\nimport { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // We are consuming our user-management context to\n  // get & set the user details here\n  //  const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\n  const {\n    user,\n    fetchUser,\n    emailPasswordLogin\n  } = useUser();\n  // We are using React's \"useState\" hook to keep track\n  //  of the form values.\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  // This function will be called whenever the user edits the form.\n  const onFormInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setForm({\n      ...form,\n      [name]: value\n    });\n  };\n\n  // This function will redirect the user to the\n  // appropriate page once the authentication is done.\n  const redirectNow = () => {\n    const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n    navigate(redirectTo ? redirectTo : \"/\");\n  };\n\n  // Once a user logs in to our app, we don’t want to ask them for their\n  // credentials again every time the user refreshes or revisits our app, \n  // so we are checking if the user is already logged in and\n  // if so we are redirecting the user to the home page.\n  // Otherwise we will do nothing and let the user to login.\n  const loadUser = async () => {\n    if (!user) {\n      const fetchedUser = await fetchUser();\n      if (fetchedUser) {\n        // Redirecting them once fetched.\n        redirectNow();\n      }\n    }\n  };\n\n  // This useEffect will run only once when the component is mounted.\n  // Hence this is helping us in verifying whether the user is already logged in\n  // or not.\n  useEffect(() => {\n    loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // This function gets fired when the user clicks on the \"Login\" button.\n  const onSubmit = async event => {\n    try {\n      // Here we are passing user details to our emailPasswordLogin\n      // function that we imported from our realm/authentication.js\n      // to validate the user credentials and log in the user into our App.\n      const user = await emailPasswordLogin(form.email, form.password);\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      if (error.statusCode === 401) {\n        alert(\"Invalid username/password. Try again!\");\n      } else {\n        alert(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        maxWidth: \"300px\",\n        margin: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Username or Email\",\n        type: \"email\",\n        variant: \"outlined\",\n        name: \"email\",\n        value: form.email,\n        onChange: onFormInputChange,\n        style: {\n          marginBottom: \"1rem\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Password\",\n        type: \"password\",\n        variant: \"outlined\",\n        name: \"password\",\n        value: form.password,\n        onChange: onFormInputChange,\n        style: {\n          marginBottom: \"1rem\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: onSubmit,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"disclaimer\",\n        children: [\"*Disclaimer: You can use the following credentials \", /*#__PURE__*/_jsxDEV(\"br\", {\n          children: \" username: admin, password=admin. Creating new admins is only allowed post Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 57\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: [\".disclaimer \", color, \": #d32f2f; /* red color for attention */ font-size: 0.8rem; /* smaller font size */ margin-top: 20px; /* space above the disclaimer */ text-align: center; /* center alignment */\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Login, \"PoAJwUe7fx2vIWj7100pW3xWu/M=\", false, function () {\n  return [useNavigate, useLocation, useUser];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["Button","TextField","useContext","useEffect","useState","Link","useLocation","useNavigate","useUser","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Login","_s","navigate","location","user","fetchUser","emailPasswordLogin","form","setForm","email","password","onFormInputChange","event","name","value","target","redirectNow","redirectTo","search","replace","loadUser","fetchedUser","onSubmit","error","statusCode","alert","children","style","display","flexDirection","maxWidth","margin","fileName","_jsxFileName","lineNumber","columnNumber","label","type","variant","onChange","marginBottom","color","onClick","className","_c","$RefreshReg$"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/pages/Login.page.js"],"sourcesContent":["import { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\n \nconst Login = () => {\n const navigate = useNavigate();\n const location = useLocation();\n \n // We are consuming our user-management context to\n // get & set the user details here\n//  const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\nconst { user, fetchUser, emailPasswordLogin } = useUser();\n // We are using React's \"useState\" hook to keep track\n //  of the form values.\n const [form, setForm] = useState({\n   email: \"\",\n   password: \"\"\n });\n \n // This function will be called whenever the user edits the form.\n const onFormInputChange = (event) => {\n   const { name, value } = event.target;\n   setForm({ ...form, [name]: value });\n };\n \n // This function will redirect the user to the\n // appropriate page once the authentication is done.\n const redirectNow = () => {\n   const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n   navigate(redirectTo ? redirectTo : \"/\");\n }\n \n // Once a user logs in to our app, we don’t want to ask them for their\n // credentials again every time the user refreshes or revisits our app, \n // so we are checking if the user is already logged in and\n // if so we are redirecting the user to the home page.\n // Otherwise we will do nothing and let the user to login.\n const loadUser = async () => {\n   if (!user) {\n     const fetchedUser = await fetchUser();\n     if (fetchedUser) {\n       // Redirecting them once fetched.\n       redirectNow();\n     }\n   }\n }\n \n // This useEffect will run only once when the component is mounted.\n // Hence this is helping us in verifying whether the user is already logged in\n // or not.\n useEffect(() => {\n   loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\n }, []);\n \n // This function gets fired when the user clicks on the \"Login\" button.\n const onSubmit = async (event) => {\n   try {\n     // Here we are passing user details to our emailPasswordLogin\n     // function that we imported from our realm/authentication.js\n     // to validate the user credentials and log in the user into our App.\n     const user = await emailPasswordLogin(form.email, form.password);\n     if (user) {\n       redirectNow();\n     }\n   } catch (error) {\n       if (error.statusCode === 401) {\n          alert(\"Invalid username/password. Try again!\");\n      } else {\n          alert(error);\n      }\n \n   }\n };\n \n return <><form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\n   <h1>Login</h1>\n   <TextField\n     label=\"Username or Email\"\n     type=\"email\"\n     variant=\"outlined\"\n     name=\"email\"\n     value={form.email}\n     onChange={onFormInputChange}\n     style={{ marginBottom: \"1rem\" }} />\n   <TextField\n     label=\"Password\"\n     type=\"password\"\n     variant=\"outlined\"\n     name=\"password\"\n     value={form.password}\n     onChange={onFormInputChange}\n     style={{ marginBottom: \"1rem\" }} />\n   <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n     Login\n   </Button>\n   <p className=\"disclaimer\">\n     *Disclaimer: You can use the following credentials <br> username: admin, password=admin. Creating new admins is only allowed post Login</br>\n   </p>\n </form><style>\n     .disclaimer {color}: #d32f2f; /* red color for attention */\n     font-size: 0.8rem; /* smaller font size */\n     margin-top: 20px; /* space above the disclaimer */\n     text-align: center; /* center alignment */\n\n   </style></>\n}\n \nexport default Login;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}