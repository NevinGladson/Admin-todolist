{"ast":null,"code":"'use client';\n\nvar _s = $RefreshSig$();\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * Demos:\n *\n * - [Portal](https://mui.com/base-ui/react-portal/)\n *\n * API:\n *\n * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)\n */\nconst Portal = /*#__PURE__*/React.forwardRef(_c = _s(function Portal(props, forwardedRef) {\n  _s();\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  // @ts-expect-error TODO upstream fix\n  const handleRef = useForkRef( /*#__PURE__*/ /*#__PURE__*/React.isValidElement(children) ? children.ref : null, forwardedRef);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(forwardedRef, mountNode);\n      return () => {\n        setRef(forwardedRef, null);\n      };\n    }\n    return undefined;\n  }, [forwardedRef, mountNode, disablePortal]);\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      const newProps = {\n        ref: handleRef\n      };\n      return /*#__PURE__*/React.cloneElement(children, newProps);\n    }\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: children\n    });\n  }\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode\n  });\n}, \"o0HkHNIU14OC06ghsHaIJuR/uCs=\", false, function () {\n  return [useForkRef, useEnhancedEffect, useEnhancedEffect];\n}));\n_c2 = Portal;\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * You can also provide a callback, which is called in a React layout effect.\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\nexport { Portal };\nvar _c, _c2;\n$RefreshReg$(_c, \"Portal$React.forwardRef\");\n$RefreshReg$(_c2, \"Portal\");","map":{"version":3,"names":["_s","$RefreshSig$","React","ReactDOM","PropTypes","exactProp","HTMLElementType","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useForkRef","useForkRef","unstable_setRef","setRef","jsx","_jsx","getContainer","container","Portal","forwardRef","_c","props","forwardedRef","children","disablePortal","mountNode","setMountNode","useState","handleRef","isValidElement","ref","document","body","undefined","newProps","cloneElement","Fragment","createPortal","_c2","process","env","NODE_ENV","propTypes","node","oneOfType","func","bool","$RefreshReg$"],"sources":["/home/nevin/Project-2/test-react-auth/frontend/src/node_modules/@mui/base/Portal/Portal.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * Demos:\n *\n * - [Portal](https://mui.com/base-ui/react-portal/)\n *\n * API:\n *\n * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)\n */\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, forwardedRef) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  // @ts-expect-error TODO upstream fix\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, forwardedRef);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(forwardedRef, mountNode);\n      return () => {\n        setRef(forwardedRef, null);\n      };\n    }\n    return undefined;\n  }, [forwardedRef, mountNode, disablePortal]);\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      const newProps = {\n        ref: handleRef\n      };\n      return /*#__PURE__*/React.cloneElement(children, newProps);\n    }\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: children\n    });\n  }\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * You can also provide a callback, which is called in a React layout effect.\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\nexport { Portal };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}