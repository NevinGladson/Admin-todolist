[{"/home/nevin/Project-2/test-react-auth/frontend/src/index.js":"1","/home/nevin/Project-2/test-react-auth/frontend/src/App.js":"2","/home/nevin/Project-2/test-react-auth/frontend/src/reportWebVitals.js":"3","/home/nevin/Project-2/test-react-auth/frontend/src/contexts/user.context.js":"4","/home/nevin/Project-2/test-react-auth/frontend/src/pages/Home.page.js":"5","/home/nevin/Project-2/test-react-auth/frontend/src/pages/PrivateRoute.page.js":"6","/home/nevin/Project-2/test-react-auth/frontend/src/pages/Login.page.js":"7","/home/nevin/Project-2/test-react-auth/frontend/src/pages/Signup.page.js":"8"},{"size":667,"mtime":1715939903655,"results":"9","hashOfConfig":"10"},{"size":815,"mtime":1712853968000,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1711622261000,"results":"12","hashOfConfig":"10"},{"size":2674,"mtime":1715532857058,"results":"13","hashOfConfig":"10"},{"size":9532,"mtime":1715531360333,"results":"14","hashOfConfig":"10"},{"size":701,"mtime":1711836893000,"results":"15","hashOfConfig":"10"},{"size":3525,"mtime":1715361731315,"results":"16","hashOfConfig":"10"},{"size":2714,"mtime":1715968546221,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4p7xkx",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/home/nevin/Project-2/test-react-auth/frontend/src/index.js",[],"/home/nevin/Project-2/test-react-auth/frontend/src/App.js",[],["39","40"],"/home/nevin/Project-2/test-react-auth/frontend/src/reportWebVitals.js",[],"/home/nevin/Project-2/test-react-auth/frontend/src/contexts/user.context.js",[],"/home/nevin/Project-2/test-react-auth/frontend/src/pages/Home.page.js",["41","42"],"import '../static/Home.Page.css'; // Import CSS file\nimport React, { useState, useEffect } from 'react';\nimport { useUser } from \"../contexts/user.context\";\nimport { Card, CardContent, Typography, Collapse, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper} from '@mui/material';\nimport AdministratorImage from '../Images/administrator.png'; // Import image for Administrator link\nimport UsersImage from '../Images/users.png'; // Import image for Users link\n\nexport default function Home() {\n  const [view, setView] = useState(null);\n  const [imageInSidebar, setImageInSidebar] = useState(false);\n  // Handler for image clicks\n  const handleImageClick = (newView) => {\n    setImageInSidebar(true);\n    setView(newView);\n  };\n\n  const TaskDetailsTable = ({ tasks }) => {\n    return (\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Tasks</TableCell>\n              <TableCell align=\"left\">Date</TableCell>\n              <TableCell align=\"left\">Urgency</TableCell>\n              <TableCell align=\"left\">Status</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tasks.map((task, index) => (\n              <TableRow key={index}>\n                <TableCell component=\"th\" scope=\"row\">{task.task}</TableCell>\n                <TableCell align=\"left\">{new Date(task.date_of_task).toLocaleDateString()}</TableCell>\n                <TableCell align=\"left\">{task.urgency}</TableCell>\n                <TableCell align=\"left\">{task.status}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n  const ImageComponent = ({ src, alt, viewType, label }) => {\n    // Check if the current view matches the image type and apply a selected class\n    const isSelected = view === viewType;\n  \n    return (\n      <div className=\"image-container\">\n        <img\n          src={src}\n          alt={alt}\n          className={`${imageInSidebar ? 'image-sidebar' : 'image-center'} ${isSelected ? 'selected-image' : ''}`}\n          onClick={() => handleImageClick(viewType)}\n        />\n        <Typography variant=\"subtitle1\" className=\"image-label\">{label}</Typography>\n      </div>\n    );\n  };\n  \n  \n\n\n  const UserDetails = ({ userId }) => {\n    const [userDetails, setUserDetails] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n      const fetchUserDetails = async () => {\n        setLoading(true);\n        try {\n          console.log(\"Fetching user details for user ID:\", userId);\n          const response = await fetch(`/api/tasks/${userId}/details`);\n          if (!response.ok) throw new Error('Failed to fetch user details');\n          const data = await response.json();\n          setUserDetails(data);\n        } catch (error) {\n          console.error(\"Error fetching user details:\", error);\n          setUserDetails(null);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchUserDetails();\n    }, [userId]);\n\n    if (loading) return <Typography>Loading...</Typography>;\n    if (!userDetails) return <Typography>No details available.</Typography>;\n\n    return (\n      <div>\n        <Typography variant=\"h6\">Email: {userDetails.email}</Typography>\n        <Typography variant=\"subtitle1\">Tasks:</Typography>\n        {userDetails.tasks.map((task, index) => (\n          <Typography key={index}>\n            Task: {task.task}, Date: {new Date(task.date_of_task).toLocaleDateString()},\n            Urgency: {task.urgency}, Status: {task.status}\n          </Typography>\n        ))}\n      </div>\n    );\n  };\n\n  const TaskUserList = () => {\n    const [users, setUsers] = useState([]);\n    const [selectedUserId, setSelectedUserId] = useState(null);\n    const [userDetails, setUserDetails] = useState({});\n\n    useEffect(() => {\n        const fetchUsers = async () => {\n            try {\n                const response = await fetch('/api/tasks');  // Ensure this endpoint correctly fetches basic user info\n                if (!response.ok) throw new Error('Failed to fetch');\n                const data = await response.json();\n                setUsers(data);\n            } catch (error) {\n                console.error(\"Error fetching users:\", error);\n            }\n        };\n\n        fetchUsers();\n    }, []);\n\n    // Function to fetch detailed user data\n    const fetchUserDetails = async (id) => {\n        try {\n            const response = await fetch(`/api/tasks/${id}/details`);\n            if (!response.ok) throw new Error('Failed to fetch user details');\n            const data = await response.json();\n            setUserDetails(data);\n        } catch (error) {\n            console.error(\"Error fetching user details:\", error);\n        }\n    };\n\n    // Handle card click to toggle expand and fetch details if not already loaded\n    const handleUserSelect = (id) => {\n        if (selectedUserId !== id) {\n            setSelectedUserId(id);\n            fetchUserDetails(id);\n        } else {\n            setSelectedUserId(null);  // Collapse if the same user card is clicked again\n        }\n    };\n\n    return (\n    <div className='user-list-container'>\n      <Typography variant=\"h6\" className=\"log-heading\">Users Log Information</Typography>\n      {users.map(user => (\n        <Card key={user.id} className='user-card log-card'>\n          <CardContent style={{ cursor: 'pointer' }} onClick={() => handleUserSelect(user.id)}>\n            <Typography variant=\"h5\" component=\"div\" className=\"log-text\">{user.username}</Typography>\n          </CardContent>\n          <Collapse in={selectedUserId === user.id} timeout=\"auto\" unmountOnExit>\n            <CardContent className=\"scrollable-content\">\n              <Typography paragraph className=\"log-text\">Email: {userDetails.email}</Typography>\n              {userDetails.tasks && userDetails.tasks.length > 0 ? (\n                <TaskDetailsTable tasks={userDetails.tasks} />\n              ) : (\n                <Typography>No tasks available.</Typography>\n              )}\n            </CardContent>\n          </Collapse>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\n\n\n\n  const UserList = () => {\n    const [users, setUsers] = useState([]);\n    const [expandedUserId, setExpandedUserId] = useState(null); // New state to track expanded user card\n\n    useEffect(() => {\n      const fetchUsers = async () => {\n        try {\n          const response = await fetch('/api/users/users');\n          if (!response.ok) throw new Error('Failed to fetch');\n          const data = await response.json();\n          setUsers(data);\n        } catch (error) {\n          console.error(\"Error fetching users:\", error);\n        }\n      };\n\n      fetchUsers();\n    }, []);\n\n    return (\n      <div className='user-list-container'>\n        <Typography variant=\"h6\" className=\"log-heading\">Admin Log Information</Typography>\n        {users.map(user => (\n          <Card key={user._id} className='user-card log-card'>\n            <CardContent onClick={() => setExpandedUserId(expandedUserId === user._id ? null : user._id)} style={{ cursor: 'pointer' }}>\n              <Typography variant=\"h5\" component=\"div\" className=\"log-text\">\n                {user.username}\n              </Typography>\n              <Typography variant=\"body2\" className=\"log-text\">\n                Email: {user.email}\n              </Typography>\n            </CardContent>\n            <Collapse in={expandedUserId === user._id} timeout=\"auto\" unmountOnExit>\n              <CardContent className=\"scrollable-content card-content-inner\">\n                <Typography paragraph className=\"log-text\">Account Creation Date: {new Date(user.accountCreationDate).toLocaleDateString()}</Typography>\n                <div className=\"session-info\">\n                {user.sessions.map((session, index) => (\n                  <Typography key={index} className=\"log-text\">\n                    Session ID: {session.sessionId}, Login Time: {new Date(session.loginTime).toLocaleString()}\n                  </Typography>\n                ))}\n                </div>\n                \n              </CardContent>\n            </Collapse>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  const Navbar = () => (\n    <nav className=\"navbar\">\n      <div className=\"navbar-left\">\n        <a href=\"http://main-todolist-env.eba-t9v3pdyf.us-east-1.elasticbeanstalk.com/\">Main Project</a>\n      </div>\n      <div className=\"navbar-right\">\n        <a className=\"Signup\" href=\"/Signup\">Signup</a>\n        <a className=\"Logout\" href=\"/Login\">Logout</a>\n      </div>\n    </nav>\n  );\n\n  return (\n    <>\n      <div className=\"main-page\">\n        <Navbar />\n        <div className=\"sidebar\">\n          {imageInSidebar && (\n            <>\n              <ImageComponent src={AdministratorImage} alt=\"Admin\" viewType=\"admin\" />\n              <ImageComponent src={UsersImage} alt=\"Users\" viewType=\"tasks\" />\n            </>\n          )}\n        </div>\n        <div style={{ textAlign: 'center', margin: '20px' }}>\n          {!imageInSidebar && (\n            <div className=\"parent-container\">\n            <ImageComponent src={AdministratorImage} alt=\"Admin\" viewType=\"admin\" label=\"Administrator\" />\n            <ImageComponent src={UsersImage} alt=\"Users\" viewType=\"tasks\" label=\"Users\" />\n          </div>\n          \n          )}\n        </div>\n        {view === 'admin' && <UserList />}\n        {view === 'tasks' && <TaskUserList />}\n      </div>\n    </>\n  );\n}\n\n","/home/nevin/Project-2/test-react-auth/frontend/src/pages/PrivateRoute.page.js",["43","44"],"import { useContext } from \"react\";\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\n \nconst PrivateRoute = () => {\n \n // Fetching the user from the user context.\n//  const { user } = useContext(UserContext);\nconst { user } = useUser();\nconst location = useLocation();\n const redirectLoginUrl = `/login?redirectTo=${encodeURI(location.pathname)}`;\n \n // If the user is not logged in we are redirecting them\n // to the login page. Otherwise we are letting them to\n // continue to the page as per the URL using <Outlet />.\n return !user ? <Navigate to={redirectLoginUrl} /> : <Outlet /> ;\n}\n \nexport default PrivateRoute;","/home/nevin/Project-2/test-react-auth/frontend/src/pages/Login.page.js",["45","46","47"],"import { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // We are consuming our user-management context to\n  // get & set the user details here\n  //  const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\n  const { user, fetchUser, emailPasswordLogin } = useUser();\n  // We are using React's \"useState\" hook to keep track\n  //  of the form values.\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  // This function will be called whenever the user edits the form.\n  const onFormInputChange = (event) => {\n    const { name, value } = event.target;\n    setForm({ ...form, [name]: value });\n  };\n\n  // This function will redirect the user to the\n  // appropriate page once the authentication is done.\n  const redirectNow = () => {\n    const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n    navigate(redirectTo ? redirectTo : \"/\");\n  }\n\n  // Once a user logs in to our app, we don’t want to ask them for their\n  // credentials again every time the user refreshes or revisits our app, \n  // so we are checking if the user is already logged in and\n  // if so we are redirecting the user to the home page.\n  // Otherwise we will do nothing and let the user to login.\n  const loadUser = async () => {\n    if (!user) {\n      const fetchedUser = await fetchUser();\n      if (fetchedUser) {\n        // Redirecting them once fetched.\n        redirectNow();\n      }\n    }\n  }\n\n  // This useEffect will run only once when the component is mounted.\n  // Hence this is helping us in verifying whether the user is already logged in\n  // or not.\n  useEffect(() => {\n    loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // This function gets fired when the user clicks on the \"Login\" button.\n  const onSubmit = async (event) => {\n    try {\n      // Here we are passing user details to our emailPasswordLogin\n      // function that we imported from our realm/authentication.js\n      // to validate the user credentials and log in the user into our App.\n      const user = await emailPasswordLogin(form.email, form.password);\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      if (error.statusCode === 401) {\n        alert(\"Invalid username/password. Try again!\");\n      } else {\n        alert(error);\n      }\n\n    }\n  };\n\n  return <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\n    <h1>Login</h1>\n    <TextField\n      label=\"Username or Email\"\n      type=\"email\"\n      variant=\"outlined\"\n      name=\"email\"\n      value={form.email}\n      onChange={onFormInputChange}\n      style={{ marginBottom: \"1rem\" }} />\n    <TextField\n      label=\"Password\"\n      type=\"password\"\n      variant=\"outlined\"\n      name=\"password\"\n      value={form.password}\n      onChange={onFormInputChange}\n      style={{ marginBottom: \"1rem\" }} />\n    <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n      Login\n    </Button>\n    <p style={{ color: '#d32f2f', fontSize: '0.8rem', marginTop: '20px', textAlign: 'center' }}>\n      *Disclaimer: You can use the following credentials <br /> username: admin, password=admin. Creating new admins is only allowed post Login\n    </p>\n\n  </form>\n}\n\nexport default Login;","/home/nevin/Project-2/test-react-auth/frontend/src/pages/Signup.page.js",["48"],"import { Button, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { useUser } from \"../contexts/user.context\";\n\nconst Signup = () => {\n  const { emailPasswordSignup } = useUser();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [form, setForm] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  const onFormInputChange = (event) => {\n    const { name, value } = event.target;\n    setForm({ ...form, [name]: value });\n  };\n\n  const redirectNow = () => {\n    navigate('/Login');\n  }\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (form.password !== form.confirmPassword) {\n      alert(\"Passwords do not match.\");\n      return;\n    }\n\n    if (!emailRegex.test(form.email)) {\n      alert(\"Please enter a valid email address.\");\n      return;\n    }\n\n    try {\n      const user = await emailPasswordSignup(form.email, form.password, form.username);\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\n      <h1>Signup</h1>\n      <TextField\n        label=\"Username\"\n        type=\"text\"\n        variant=\"outlined\"\n        name=\"username\"\n        value={form.username}\n        onInput={onFormInputChange}\n        style={{ marginBottom: \"1rem\" }}\n      />\n      <TextField\n        label=\"Email\"\n        type=\"email\"\n        variant=\"outlined\"\n        name=\"email\"\n        value={form.email}\n        onInput={onFormInputChange}\n        style={{ marginBottom: \"1rem\" }}\n      />\n      <TextField\n        label=\"Password\"\n        type=\"password\"\n        variant=\"outlined\"\n        name=\"password\"\n        value={form.password}\n        onInput={onFormInputChange}\n        style={{ marginBottom: \"1rem\" }}\n      />\n      <TextField\n        label=\"Confirm Password\"\n        type=\"password\"\n        variant=\"outlined\"\n        name=\"confirmPassword\"\n        value={form.confirmPassword}\n        onInput={onFormInputChange}\n        style={{ marginBottom: \"1rem\" }}\n      />\n      <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n        Signup\n      </Button>\n      <p style={{ color: '#d32f2f', fontSize: '0.8rem', marginTop: '20px', textAlign: 'center' }}>\n        Do not enter your actual credentials. Enter fake but memorable credentials. For example, email: admin@gmail.com, username=admin, password=admin. The above example credentials are already in use.\n      </p>\n    </form>\n  );\n}\n\nexport default Signup;\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":3,"column":10,"nodeType":"55","messageId":"56","endLine":3,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":64,"column":9,"nodeType":"55","messageId":"56","endLine":64,"endColumn":20},{"ruleId":"53","severity":1,"message":"58","line":1,"column":10,"nodeType":"55","messageId":"56","endLine":1,"endColumn":20},{"ruleId":"53","severity":1,"message":"59","line":3,"column":19,"nodeType":"55","messageId":"56","endLine":3,"endColumn":30},{"ruleId":"53","severity":1,"message":"58","line":2,"column":10,"nodeType":"55","messageId":"56","endLine":2,"endColumn":20},{"ruleId":"53","severity":1,"message":"60","line":3,"column":10,"nodeType":"55","messageId":"56","endLine":3,"endColumn":14},{"ruleId":"53","severity":1,"message":"59","line":4,"column":19,"nodeType":"55","messageId":"56","endLine":4,"endColumn":30},{"ruleId":"53","severity":1,"message":"61","line":9,"column":9,"nodeType":"55","messageId":"56","endLine":9,"endColumn":17},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'useUser' is defined but never used.","Identifier","unusedVar","'UserDetails' is assigned a value but never used.","'useContext' is defined but never used.","'UserContext' is defined but never used.","'Link' is defined but never used.","'location' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]