{"version":3,"sources":["contexts/user.context.js","Images/administrator.png","Images/users.png","pages/Home.page.js","pages/Login.page.js","pages/PrivateRoute.page.js","pages/Signup.page.js","App.js","reportWebVitals.js","index.js"],"names":["UserContext","createContext","UserProvider","_ref","children","user","setUser","useState","_jsx","Provider","value","emailPasswordLogin","async","loginIdentifier","password","response","fetch","method","headers","body","JSON","stringify","credentials","ok","errorDetails","json","Error","concat","message","userData","error","console","emailPasswordSignup","email","username","fetchUser","logOutUser","useUser","useContext","Home","view","setView","imageInSidebar","setImageInSidebar","TaskDetailsTable","tasks","TableContainer","component","Paper","_jsxs","Table","TableHead","TableRow","TableCell","align","TableBody","map","task","index","scope","Date","date_of_task","toLocaleDateString","urgency","status","ImageComponent","_ref2","src","alt","viewType","label","isSelected","className","onClick","handleImageClick","newView","Typography","variant","TaskUserList","users","setUsers","selectedUserId","setSelectedUserId","userDetails","setUserDetails","useEffect","data","fetchUsers","handleUserSelect","id","fetchUserDetails","Card","CardContent","style","cursor","Collapse","in","timeout","unmountOnExit","paragraph","length","UserList","expandedUserId","setExpandedUserId","_id","accountCreationDate","sessions","session","sessionId","loginTime","toLocaleString","Navbar","href","_Fragment","AdministratorImage","UsersImage","textAlign","margin","Login","navigate","useNavigate","location","useLocation","form","setForm","onFormInputChange","event","name","target","redirectNow","redirectTo","search","replace","loadUser","display","flexDirection","maxWidth","TextField","type","onChange","marginBottom","Button","color","statusCode","alert","fontSize","marginTop","PrivateRoute","redirectLoginUrl","encodeURI","pathname","Outlet","Navigate","to","Signup","confirmPassword","emailRegex","onInput","preventDefault","test","App","BrowserRouter","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","navigator","serviceWorker","ready","registration","unregister","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.eff354e9.chunk.js","sourcesContent":["import { createContext, useState, useContext } from \"react\";\n\nconst UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  // Updated to interact with your Express backend\n  const emailPasswordLogin = async (loginIdentifier, password) => {\n    try {\n        const response = await fetch('http://admin-todolist-env.eba-qgfa3w94.us-east-1.elasticbeanstalk.com/api/users/login', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                loginIdentifier, // This can be either username or email\n                password\n            }),\n            credentials: 'include'\n        });\n        \n        if (!response.ok) {\n            const errorDetails = await response.json();\n            throw new Error(`Login failed: ${errorDetails.message || \"Unknown error\"}`);\n        }\n\n        const userData = await response.json();\n        setUser(userData);\n        return userData;\n    } catch (error) {\n        console.error(\"Error during login:\", error);\n        throw error;\n    }\n};\n\n\n  const emailPasswordSignup = async (email, password, username) => {\n    try {\n      const response = await fetch('http://admin-todolist-env.eba-qgfa3w94.us-east-1.elasticbeanstalk.com/api/users/signup', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password, username }),\n        credentials: 'include', // Include credentials for cross-origin requests\n      });\n      if (!response.ok) {\n        const errorDetails = await response.json(); // Assuming the server sends JSON with error details\n        throw new Error(`Signup failed: ${errorDetails.error || \"Unknown error\"}`);\n      }\n      const userData = await response.json(); // Assuming your endpoint responds with user data\n      setUser(userData); // You might adjust this based on your backend response\n      return userData;\n    } catch (error) {\n      console.error(\"Error during signup:\", error);\n      throw error;\n    }\n  };\n\n  // Placeholder for fetching user data, adjust based on your auth method\n  const fetchUser = async () => {\n    // Implement based on how you're managing user sessions or authentication state\n  };\n\n  const logOutUser = async () => {\n    // Implement logout functionality, possibly calling a backend endpoint to clear session/cookie\n  };\n\n  return (\n    <UserContext.Provider value={{ user, setUser, emailPasswordLogin, emailPasswordSignup, fetchUser, logOutUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = () => useContext(UserContext);\n","export default __webpack_public_path__ + \"static/media/administrator.c0f8f4b4.png\";","export default __webpack_public_path__ + \"static/media/users.2c8a7452.png\";","import '../static/Home.Page.css'; // Import CSS file\nimport React, { useState, useEffect } from 'react';\nimport { useUser } from \"../contexts/user.context\";\nimport { Card, CardContent, Typography, Collapse, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper} from '@mui/material';\nimport AdministratorImage from '../Images/administrator.png'; // Import image for Administrator link\nimport UsersImage from '../Images/users.png'; // Import image for Users link\n\nexport default function Home() {\n  const [view, setView] = useState(null);\n  const [imageInSidebar, setImageInSidebar] = useState(false);\n  // Handler for image clicks\n  const handleImageClick = (newView) => {\n    setImageInSidebar(true);\n    setView(newView);\n  };\n\n  const TaskDetailsTable = ({ tasks }) => {\n    return (\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Tasks</TableCell>\n              <TableCell align=\"left\">Date</TableCell>\n              <TableCell align=\"left\">Urgency</TableCell>\n              <TableCell align=\"left\">Status</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tasks.map((task, index) => (\n              <TableRow key={index}>\n                <TableCell component=\"th\" scope=\"row\">{task.task}</TableCell>\n                <TableCell align=\"left\">{new Date(task.date_of_task).toLocaleDateString()}</TableCell>\n                <TableCell align=\"left\">{task.urgency}</TableCell>\n                <TableCell align=\"left\">{task.status}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n  const ImageComponent = ({ src, alt, viewType, label }) => {\n    // Check if the current view matches the image type and apply a selected class\n    const isSelected = view === viewType;\n  \n    return (\n      <div className=\"image-container\">\n        <img\n          src={src}\n          alt={alt}\n          className={`${imageInSidebar ? 'image-sidebar' : 'image-center'} ${isSelected ? 'selected-image' : ''}`}\n          onClick={() => handleImageClick(viewType)}\n        />\n        <Typography variant=\"subtitle1\" className=\"image-label\">{label}</Typography>\n      </div>\n    );\n  };\n  \n  \n\n\n  const UserDetails = ({ userId }) => {\n    const [userDetails, setUserDetails] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n      const fetchUserDetails = async () => {\n        setLoading(true);\n        try {\n          console.log(\"Fetching user details for user ID:\", userId);\n          const response = await fetch(`/api/tasks/${userId}/details`);\n          if (!response.ok) throw new Error('Failed to fetch user details');\n          const data = await response.json();\n          setUserDetails(data);\n        } catch (error) {\n          console.error(\"Error fetching user details:\", error);\n          setUserDetails(null);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchUserDetails();\n    }, [userId]);\n\n    if (loading) return <Typography>Loading...</Typography>;\n    if (!userDetails) return <Typography>No details available.</Typography>;\n\n    return (\n      <div>\n        <Typography variant=\"h6\">Email: {userDetails.email}</Typography>\n        <Typography variant=\"subtitle1\">Tasks:</Typography>\n        {userDetails.tasks.map((task, index) => (\n          <Typography key={index}>\n            Task: {task.task}, Date: {new Date(task.date_of_task).toLocaleDateString()},\n            Urgency: {task.urgency}, Status: {task.status}\n          </Typography>\n        ))}\n      </div>\n    );\n  };\n\n  const TaskUserList = () => {\n    const [users, setUsers] = useState([]);\n    const [selectedUserId, setSelectedUserId] = useState(null);\n    const [userDetails, setUserDetails] = useState({});\n\n    useEffect(() => {\n        const fetchUsers = async () => {\n            try {\n                const response = await fetch('/api/tasks');  // Ensure this endpoint correctly fetches basic user info\n                if (!response.ok) throw new Error('Failed to fetch');\n                const data = await response.json();\n                setUsers(data);\n            } catch (error) {\n                console.error(\"Error fetching users:\", error);\n            }\n        };\n\n        fetchUsers();\n    }, []);\n\n    // Function to fetch detailed user data\n    const fetchUserDetails = async (id) => {\n        try {\n            const response = await fetch(`/api/tasks/${id}/details`);\n            if (!response.ok) throw new Error('Failed to fetch user details');\n            const data = await response.json();\n            setUserDetails(data);\n        } catch (error) {\n            console.error(\"Error fetching user details:\", error);\n        }\n    };\n\n    // Handle card click to toggle expand and fetch details if not already loaded\n    const handleUserSelect = (id) => {\n        if (selectedUserId !== id) {\n            setSelectedUserId(id);\n            fetchUserDetails(id);\n        } else {\n            setSelectedUserId(null);  // Collapse if the same user card is clicked again\n        }\n    };\n\n    return (\n    <div className='user-list-container'>\n      <Typography variant=\"h6\" className=\"log-heading\">Users Log Information</Typography>\n      {users.map(user => (\n        <Card key={user.id} className='user-card log-card'>\n          <CardContent style={{ cursor: 'pointer' }} onClick={() => handleUserSelect(user.id)}>\n            <Typography variant=\"h5\" component=\"div\" className=\"log-text\">{user.username}</Typography>\n          </CardContent>\n          <Collapse in={selectedUserId === user.id} timeout=\"auto\" unmountOnExit>\n            <CardContent className=\"scrollable-content\">\n              <Typography paragraph className=\"log-text\">Email: {userDetails.email}</Typography>\n              {userDetails.tasks && userDetails.tasks.length > 0 ? (\n                <TaskDetailsTable tasks={userDetails.tasks} />\n              ) : (\n                <Typography>No tasks available.</Typography>\n              )}\n            </CardContent>\n          </Collapse>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\n\n\n\n  const UserList = () => {\n    const [users, setUsers] = useState([]);\n    const [expandedUserId, setExpandedUserId] = useState(null); // New state to track expanded user card\n\n    useEffect(() => {\n      const fetchUsers = async () => {\n        try {\n          const response = await fetch('/api/users/users');\n          if (!response.ok) throw new Error('Failed to fetch');\n          const data = await response.json();\n          setUsers(data);\n        } catch (error) {\n          console.error(\"Error fetching users:\", error);\n        }\n      };\n\n      fetchUsers();\n    }, []);\n\n    return (\n      <div className='user-list-container'>\n        <Typography variant=\"h6\" className=\"log-heading\">Admin Log Information</Typography>\n        {users.map(user => (\n          <Card key={user._id} className='user-card log-card'>\n            <CardContent onClick={() => setExpandedUserId(expandedUserId === user._id ? null : user._id)} style={{ cursor: 'pointer' }}>\n              <Typography variant=\"h5\" component=\"div\" className=\"log-text\">\n                {user.username}\n              </Typography>\n              <Typography variant=\"body2\" className=\"log-text\">\n                Email: {user.email}\n              </Typography>\n            </CardContent>\n            <Collapse in={expandedUserId === user._id} timeout=\"auto\" unmountOnExit>\n              <CardContent className=\"scrollable-content card-content-inner\">\n                <Typography paragraph className=\"log-text\">Account Creation Date: {new Date(user.accountCreationDate).toLocaleDateString()}</Typography>\n                <div className=\"session-info\">\n                {user.sessions.map((session, index) => (\n                  <Typography key={index} className=\"log-text\">\n                    Session ID: {session.sessionId}, Login Time: {new Date(session.loginTime).toLocaleString()}\n                  </Typography>\n                ))}\n                </div>\n                \n              </CardContent>\n            </Collapse>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  const Navbar = () => (\n    <nav className=\"navbar\">\n      <div className=\"navbar-left\">\n        <a href=\"http://main-todolist-env.eba-t9v3pdyf.us-east-1.elasticbeanstalk.com/\">Main Project</a>\n      </div>\n      <div className=\"navbar-right\">\n        <a className=\"Signup\" href=\"/Signup\">Signup</a>\n        <a className=\"Logout\" href=\"/Login\">Logout</a>\n      </div>\n    </nav>\n  );\n\n  return (\n    <>\n      <div className=\"main-page\">\n        <Navbar />\n        <div className=\"sidebar\">\n          {imageInSidebar && (\n            <>\n              <ImageComponent src={AdministratorImage} alt=\"Admin\" viewType=\"admin\" />\n              <ImageComponent src={UsersImage} alt=\"Users\" viewType=\"tasks\" />\n            </>\n          )}\n        </div>\n        <div style={{ textAlign: 'center', margin: '20px' }}>\n          {!imageInSidebar && (\n            <div className=\"parent-container\">\n            <ImageComponent src={AdministratorImage} alt=\"Admin\" viewType=\"admin\" label=\"Administrator\" />\n            <ImageComponent src={UsersImage} alt=\"Users\" viewType=\"tasks\" label=\"Users\" />\n          </div>\n          \n          )}\n        </div>\n        {view === 'admin' && <UserList />}\n        {view === 'tasks' && <TaskUserList />}\n      </div>\n    </>\n  );\n}\n\n","import { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // We are consuming our user-management context to\n  // get & set the user details here\n  //  const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\n  const { user, fetchUser, emailPasswordLogin } = useUser();\n  // We are using React's \"useState\" hook to keep track\n  //  of the form values.\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  // This function will be called whenever the user edits the form.\n  const onFormInputChange = (event) => {\n    const { name, value } = event.target;\n    setForm({ ...form, [name]: value });\n  };\n\n  // This function will redirect the user to the\n  // appropriate page once the authentication is done.\n  const redirectNow = () => {\n    const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n    navigate(redirectTo ? redirectTo : \"/\");\n  }\n\n  // Once a user logs in to our app, we don’t want to ask them for their\n  // credentials again every time the user refreshes or revisits our app, \n  // so we are checking if the user is already logged in and\n  // if so we are redirecting the user to the home page.\n  // Otherwise we will do nothing and let the user to login.\n  const loadUser = async () => {\n    if (!user) {\n      const fetchedUser = await fetchUser();\n      if (fetchedUser) {\n        // Redirecting them once fetched.\n        redirectNow();\n      }\n    }\n  }\n\n  // This useEffect will run only once when the component is mounted.\n  // Hence this is helping us in verifying whether the user is already logged in\n  // or not.\n  useEffect(() => {\n    loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // This function gets fired when the user clicks on the \"Login\" button.\n  const onSubmit = async (event) => {\n    try {\n      // Here we are passing user details to our emailPasswordLogin\n      // function that we imported from our realm/authentication.js\n      // to validate the user credentials and log in the user into our App.\n      const user = await emailPasswordLogin(form.email, form.password);\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      if (error.statusCode === 401) {\n        alert(\"Invalid username/password. Try again!\");\n      } else {\n        alert(error);\n      }\n\n    }\n  };\n\n  return <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\n    <h1>Login</h1>\n    <TextField\n      label=\"Username or Email\"\n      type=\"email\"\n      variant=\"outlined\"\n      name=\"email\"\n      value={form.email}\n      onChange={onFormInputChange}\n      style={{ marginBottom: \"1rem\" }} />\n    <TextField\n      label=\"Password\"\n      type=\"password\"\n      variant=\"outlined\"\n      name=\"password\"\n      value={form.password}\n      onChange={onFormInputChange}\n      style={{ marginBottom: \"1rem\" }} />\n    <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n      Login\n    </Button>\n    <p style={{ color: '#d32f2f', fontSize: '0.8rem', marginTop: '20px', textAlign: 'center' }}>\n      *Disclaimer: You can use the following credentials <br /> username: admin, password=admin. Creating new admins is only allowed post Login\n    </p>\n\n  </form>\n}\n\nexport default Login;","import { useContext } from \"react\";\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { useUser, UserContext } from \"../contexts/user.context\";\n \nconst PrivateRoute = () => {\n \n // Fetching the user from the user context.\n//  const { user } = useContext(UserContext);\nconst { user } = useUser();\nconst location = useLocation();\n const redirectLoginUrl = `/login?redirectTo=${encodeURI(location.pathname)}`;\n \n // If the user is not logged in we are redirecting them\n // to the login page. Otherwise we are letting them to\n // continue to the page as per the URL using <Outlet />.\n return !user ? <Navigate to={redirectLoginUrl} /> : <Outlet /> ;\n}\n \nexport default PrivateRoute;","import { Button, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { useUser } from \"../contexts/user.context\";\n\nconst Signup = () => {\n  const { emailPasswordSignup } = useUser();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [form, setForm] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  const onFormInputChange = (event) => {\n    const { name, value } = event.target;\n    setForm({ ...form, [name]: value });\n  };\n\n  const redirectNow = () => {\n    navigate('/Login');\n  }\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (form.password !== form.confirmPassword) {\n      alert(\"Passwords do not match.\");\n      return;\n    }\n\n    if (!emailRegex.test(form.email)) {\n      alert(\"Please enter a valid email address.\");\n      return;\n    }\n\n    try {\n      const user = await emailPasswordSignup(form.email, form.password, form.username);\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\n      <h1>Signup</h1>\n      <TextField\n        label=\"Username\"\n        type=\"text\"\n        variant=\"outlined\"\n        name=\"username\"\n        value={form.username}\n        onInput={onFormInputChange}\n        style={{ marginBottom: \"1rem\" }}\n      />\n      <TextField\n        label=\"Email\"\n        type=\"email\"\n        variant=\"outlined\"\n        name=\"email\"\n        value={form.email}\n        onInput={onFormInputChange}\n        style={{ marginBottom: \"1rem\" }}\n      />\n      <TextField\n        label=\"Password\"\n        type=\"password\"\n        variant=\"outlined\"\n        name=\"password\"\n        value={form.password}\n        onInput={onFormInputChange}\n        style={{ marginBottom: \"1rem\" }}\n      />\n      <TextField\n        label=\"Confirm Password\"\n        type=\"password\"\n        variant=\"outlined\"\n        name=\"confirmPassword\"\n        value={form.confirmPassword}\n        onInput={onFormInputChange}\n        style={{ marginBottom: \"1rem\" }}\n      />\n      <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n        Signup\n      </Button>\n      <p style={{ color: '#d32f2f', fontSize: '0.8rem', marginTop: '20px', textAlign: 'center' }}>\n        Do not enter your actual credentials. Enter fake but memorable credentials. For example, email: admin@gmail.com, username=admin, password=admin. The above example credentials are already in use.\n      </p>\n    </form>\n  );\n}\n\nexport default Signup;\n","// App.js\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { UserProvider } from \"./contexts/user.context\";\nimport Home from \"./pages/Home.page\";\nimport Login from \"./pages/Login.page\";\nimport PrivateRoute from \"./pages/PrivateRoute.page\";\nimport Signup from \"./pages/Signup.page\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <UserProvider>\n                <Routes>\n                    <Route exact path=\"/login\" element={<Login />} />\n                    <Route exact path=\"/signup\" element={<Signup />} />\n                    <Route element={<PrivateRoute />}>\n                        <Route exact path=\"/\" element={<Home />} />\n                    </Route>\n                </Routes>\n            </UserProvider>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.ready.then(registration => {\n    registration.unregister();\n  });\n}\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}